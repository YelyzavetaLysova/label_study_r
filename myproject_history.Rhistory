aov_cond_age <- aov(trust_image ~ condition * age_group, data = combined_image_dem)
summary(aov_cond_age)
# Full three-way interaction (if sample size allows)
aov_full <- aov(trust_image ~ condition * gender * age_group, data = combined_image_dem)
summary(aov_full)
library(ggplot2)
ggplot(combined_image_dem, aes(x = condition, y = trust_image, color = gender)) +
stat_summary(fun = mean, geom = "point", size = 3, position = position_dodge(width = 0.5)) +
stat_summary(fun.data = mean_cl_boot, geom = "errorbar", width = 0.2, position = position_dodge(width = 0.5)) +
labs(title = "Interaction: Condition × Gender on Image Trust",
x = "Condition", y = "Mean Trust Score") +
theme_minimal()
ggplot(combined_image_dem,
aes(x = condition, y = trust_image, color = gender, linetype = age_group)) +
stat_summary(fun = mean, geom = "line", position = position_dodge(width = 0.2)) +
stat_summary(fun = mean, geom = "point", position = position_dodge(width = 0.2)) +
facet_wrap(~ age_group + gender) +
labs(title = "Condition × Gender × Age Group Interaction on Image Trust",
x = "Condition", y = "Mean Trust Score") +
theme_minimal()
library(ggplot2)
plot_df <- combined_image_dem %>%
group_by(condition, gender, age_group) %>%
summarise(mean_trust=mean(trust_image), se=sd(trust_image)/sqrt(n()), .groups="drop") %>%
mutate(ci_low=mean_trust-1.96*se, ci_high=mean_trust+1.96*se)
ggplot(plot_df, aes(condition, mean_trust, color=gender, group=gender)) +
geom_line(position=position_dodge(0.3)) +
geom_point(position=position_dodge(0.3)) +
geom_errorbar(aes(ymin=ci_low, ymax=ci_high), width=0.1, position=position_dodge(0.3)) +
facet_wrap(~age_group) +
theme_minimal() +
labs(title="Image Trust: Condition × Gender × Age Group Interaction")
ggplot(combined_image_dem, aes(condition, trust_image)) +
geom_boxplot() +
facet_grid(gender~age_group) +
theme(axis.text.x=element_text(angle=45,hjust=1)) +
labs(title="Trust by Condition within Each Gender×Age Subgroup")
# 1. Install & load emmeans (if not already)
install.packages("emmeans")
library(emmeans)
# 2. Fit the full three-way model again
aov_full <- aov(trust_image ~ condition * gender * age_group, data = combined_image_dem)
# 3. Get EMMs for condition within each gender × age group
emm_sub <- emmeans(aov_full, ~ condition | gender * age_group)
# 4. Look at the means
summary(emm_sub)
# 5. Pairwise contrasts of condition within each subgroup
pairs(emm_sub, adjust = "bonferroni")
# Install/load necessary packages
if(!require(emmeans)) install.packages("emmeans")
library(emmeans)
library(dplyr)
library(tidyr)
# 1. (Re)load emmeans
if(!require(emmeans)) install.packages("emmeans")
library(emmeans)
# 2. Fit the full three‐way ANOVA
aov_full <- aov(trust_image ~ condition * gender * age_group, data = combined_image_dem)
# 3. Compute EMMs by subgroup
emm_sub2 <- emmeans(aov_full, ~ condition, by = c("gender","age_group"))
# 4. Pairwise contrasts within each gender×age cell
cont2 <- contrast(emm_sub2, method = "pairwise", adjust = "bonferroni")
# 5. Turn into a data frame and filter significant only
cont2_df <- as.data.frame(summary(cont2))
sig_subgroups <- subset(cont2_df, p.value < 0.05)
# 6. Print the “special” subgroups
if(nrow(sig_subgroups) == 0) {
message("No significant condition contrasts at p < 0.05 in any subgroup.")
} else {
print(sig_subgroups[, c("gender","age_group","contrast","estimate","SE","df","t.ratio","p.value")])
}
library(dplyr)
library(ggplot2)
# Filter to only the significant subgroups
special <- combined_image_dem %>%
filter(
(gender == "Male"   & age_group == "25–34") |
(gender == "Female" & age_group == "35–44") |
(gender == "Female" & age_group == "45–54")
)
# Plot
ggplot(special, aes(x = condition, y = trust_image, fill = condition)) +
geom_boxplot() +
facet_grid(gender ~ age_group) +
scale_fill_manual(values = c("c2pa" = "#D55E00",
"color" = "#0072B2",
"no_color" = "#009E73")) +
theme_minimal(base_size = 14) +
labs(
title = "Trust in Image for Subgroups with Significant Label Effects",
x = "Label Condition",
y = "Trust Score"
) +
theme(
strip.text = element_text(face = "bold"),
axis.text.x = element_text(angle = 30, hjust = 1),
legend.position = "none"
)
# 1) Load libraries
library(dplyr)
library(ggplot2)
# 2) Prepare the data
understand_dem <- post_df %>%
filter(condition != "nolabel", !is.na(understood_label)) %>%
# rename for clarity if needed
rename(part_id = id) %>%
# bring in demographics
left_join(demographics_df, by = c("part_id" = "id")) %>%
# ensure factors
mutate(
condition   = factor(condition, levels = c("c2pa","color","no_color")),
gender      = factor(gender),
age_group   = factor(age_group),
education   = factor(education)
)
# 3) Run the full multi‐factor ANOVA
anova_under_multi <- aov(understood_label ~ condition + gender + age_group + education,
data = understand_dem)
# 4) View the summary
summary(anova_under_multi)
# 5) (Optional) Tukey‐style pairwise on condition
if(require(emmeans, quietly=TRUE)) {
emm <- emmeans::emmeans(anova_under_multi, ~ condition)
print(emmeans::pairs(emm, adjust="bonferroni"))
}
# Assuming you already have:
# library(emmeans)
# anova_under_multi <- aov(understood_label ~ condition + gender + age_group + education,
#                          data = understand_dem)
# 1. Get estimated marginal means for ‘condition’:
emm_cond <- emmeans(anova_under_multi, ~ condition)
# 2. Run pairwise contrasts with Bonferroni adjustment:
cond_contrasts <- contrast(emm_cond, method = "pairwise", adjust = "bonferroni")
summary(cond_contrasts)
library(emmeans)
library(ggplot2)
# 1. Obtain EMMs and confidence limits for condition
emm_cond <- emmeans(anova_under_multi, ~ condition)
emm_df <- as.data.frame(emm_cond)
# 2. Plot
ggplot(emm_df, aes(x = condition, y = emmean, fill = condition)) +
geom_col(width = 0.6, color = "black", show.legend = FALSE) +
geom_errorbar(aes(ymin = lower.CL, ymax = upper.CL), width = 0.2) +
labs(
title = "Adjusted Understanding by Label Condition",
x = "Label Condition",
y = "Estimated Marginal Mean of Understanding"
) +
scale_fill_manual(values = c("c2pa"="#D55E00","color"="#0072B2","no_color"="#009E73")) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(face="bold", hjust=0.5),
axis.title = element_text(face="bold"),
axis.text.x = element_text(angle=15, hjust=1)
)
View(mid_df)
library(dplyr)
library(jsonlite)
# 1. Read in your data (adjust paths if needed)
mid_df         <- read.csv("path/to/mid_df.csv", stringsAsFactors = FALSE)
rounds_flags <- rounds_clean %>%
select(id, article) %>%
rowwise() %>%
mutate(
# parse the JSON string
article_json = list(fromJSON(article)),
# pull out the flag (will be TRUE, FALSE, or NA)
label_explained = article_json$label_explained
) %>%
ungroup() %>%
select(id, label_explained)
library(dplyr)
library(jsonlite)
library(purrr)
library(dplyr)
library(jsonlite)
# 2. Extract `label_explained`, safely handling missing or empty JSON
rounds_flags <- rounds_clean %>%
select(id, article) %>%
mutate(
label_explained = sapply(article, function(txt) {
if (is.na(txt) || txt == "") {
NA                # no JSON available
} else {
# parse JSON and pull out label_explained
parsed <- tryCatch(fromJSON(txt), error = function(e) NULL)
if (is.null(parsed$label_explained)) NA else parsed$label_explained
}
})
) %>%
select(id, label_explained)
# 3. Join into mid_df by matching round_id → id
mid_df_enriched <- mid_df %>%
left_join(rounds_flags, by = c("round_id" = "id"))
# 4. Inspect the new column
head(mid_df_enriched)
View(mid_df_enriched)
library(dplyr)
library(ggplot2)
# 1a. Start from your enriched mid‐rounds with label_explained
#    (from previous steps):
mid_df_enriched <- read.csv("path/to/mid_df_enriched.csv", stringsAsFactors = FALSE)
expand_df <- mid_df_enriched %>%
select(participant_id, condition, label_explained)
# 1c. Bring in the post‐questionnaire understanding scores
post_df <- read.csv("path/to/post_df.csv", stringsAsFactors = FALSE) %>%
select(participant_id = id, condition, understood_label)
library(dplyr)
library(ggplot2)
library(emmeans)
# 1. Build the analysis dataset
analysis_df <- post_df %>%
rename(participant_id = id) %>%          # align column name
inner_join(mid_df_enriched %>%           # already has label_explained
select(participant_id, condition, label_explained),
by = c("participant_id","condition")) %>%
filter(!is.na(label_explained)) %>%      # drop missing flags
mutate(
condition       = factor(condition,   levels = c("c2pa","color","no_color")),
label_explained = factor(label_explained, levels = c(FALSE,TRUE))
)
# 2. Two-way ANOVA with interaction
anova_expand <- aov(understood_label ~ condition * label_explained, data = analysis_df)
summary(anova_expand)
# → look for:
#    condition:label_explained  (interaction p-value)
#    main effect of label_explained  (overall click-vs-no-click)
# 3. Post-hoc: within each condition, does expanding help?
emm <- emmeans(anova_expand, ~ label_explained | condition)
summary(contrast(emm, method="pairwise", adjust="bonferroni"))
# 4. Plot the interaction
plot_df <- analysis_df %>%
group_by(condition, label_explained) %>%
summarise(
mean_u = mean(understood_label, na.rm=TRUE),
se     = sd(understood_label, na.rm=TRUE)/sqrt(n()),
ci_lo  = mean_u - 1.96*se,
ci_hi  = mean_u + 1.96*se,
.groups="drop"
)
ggplot(plot_df, aes(condition, mean_u, color=label_explained, group=label_explained)) +
geom_point(size=3, position=position_dodge(0.3)) +
geom_line(position=position_dodge(0.3)) +
geom_errorbar(aes(ymin=ci_lo, ymax=ci_hi), width=0.1,
position=position_dodge(0.3)) +
scale_color_manual(values=c("FALSE"="grey40","TRUE"="steelblue")) +
labs(
title = "Did Expanding the Label Improve Understanding?",
x = "Label Condition",
y = "Mean Understanding Score",
color = "Clicked to\nExpand?"
) +
theme_minimal(base_size=14)
analysis_df <- post_df %>%
rename(participant_id = id) %>%
inner_join(mid_df_enriched %>% select(participant_id, condition, label_explained),
by = c("participant_id","condition")) %>%
filter(!is.na(label_explained)) %>%
mutate(
condition       = factor(condition, levels = c("c2pa","color","no_color")),
label_explained = factor(label_explained, levels = c(FALSE,TRUE))
)
analysis_df <- post_df %>%
rename(participant_id = id) %>%
filter(condition != "nolabel") %>%       # <— remove nolabel here
inner_join(mid_df_enriched %>% select(participant_id, condition, label_explained),
by = c("participant_id","condition")) %>%
filter(!is.na(label_explained)) %>%
mutate(
condition       = factor(condition, levels = c("c2pa","color","no_color")),
label_explained = factor(label_explained, levels = c(FALSE,TRUE))
)
View(analysis_df)
library(dplyr)
library(ggplot2)
library(emmeans)
# 1. Build analysis_df without 'nolabel'
analysis_df <- post_df %>%
rename(participant_id = id) %>%
filter(condition != "nolabel") %>%
inner_join(
mid_df_enriched %>% select(participant_id, condition, label_explained),
by = c("participant_id","condition")
) %>%
filter(!is.na(label_explained)) %>%
mutate(
understood_label = as.numeric(understood_label),        # ensure numeric
condition        = factor(condition,   levels = c("c2pa","color","no_color")),
label_explained  = factor(label_explained, levels = c(FALSE,TRUE))
)
# 2. Two‐way ANOVA: does expanding matter?
anova_expand <- aov(understood_label ~ condition * label_explained, data = analysis_df)
summary(anova_expand)
# → Main effect of label_explained: p = 0.138 (n.s.)
# → Interaction: p = 0.971 (n.s.)
# 3. Post‐hoc within each condition
emm <- emmeans(anova_expand, ~ label_explained | condition)
summary(contrast(emm, method="pairwise", adjust="bonferroni"))
# → All p > .30: no significant click‐vs‐no‐click differences in any condition
# 4. Visualize means + 95% CI, dropping empty groups
plot_df <- analysis_df %>%
group_by(condition, label_explained) %>%
filter(n() > 0) %>%
summarise(
mean_u = mean(understood_label, na.rm=TRUE),
se     = sd(understood_label, na.rm=TRUE)/sqrt(n()),
ci_lo  = mean_u - 1.96*se,
ci_hi  = mean_u + 1.96*se,
.groups = "drop"
)
ggplot(plot_df, aes(condition, mean_u, color=label_explained, group=label_explained)) +
geom_point(size=3, position=position_dodge(0.3)) +
geom_line(position=position_dodge(0.3)) +
geom_errorbar(aes(ymin=ci_lo, ymax=ci_hi), width=0.1, position=position_dodge(0.3)) +
scale_color_manual(values=c("FALSE"="grey40","TRUE"="steelblue")) +
labs(
title = "Does Expanding the Label Improve Understanding?",
x = "Label Condition",
y = "Mean Understanding Score",
color = "Expanded?"
) +
theme_minimal(base_size=14)
# 2. Extract label_explained from the JSON in rounds_clean$article
rounds_clean <- rounds_clean %>%
mutate(label_explained = sapply(article, function(txt) {
if (is.na(txt) || txt == "") return(NA)
parsed <- tryCatch(fromJSON(txt), error = function(e) NULL)
if (is.null(parsed$label_explained)) NA else parsed$label_explained
}))
# 3. Merge that flag into mid_df by round_id → id
mid_enriched <- mid_df %>%
left_join(rounds_clean %>% select(id, round_number, label_explained),
by = c("round_id" = "id"))
# 4. Click summary by condition
click_summary <- mid_enriched %>%
filter(!is.na(label_explained)) %>%
group_by(condition) %>%
summarise(
total     = n(),
clicks    = sum(label_explained, na.rm = TRUE),
click_rate= clicks / total
)
print(click_summary)
# 5. Demographics distribution for participants who clicked at least once
clickers <- mid_enriched %>%
filter(label_explained) %>%
distinct(participant_id)
demo_clicked <- participants %>%
filter(id %in% clickers$participant_id) %>%
inner_join(demographics, by = "id") %>%
count(gender, age_group, education)
library(dplyr)
library(stringr)
# 1. Load your post‐questionnaire data
post_df <- read.csv("path/to/post_df.csv", stringsAsFactors = FALSE)
# 2. Define the set of “good” expectation options exactly as they appear in your data
good_opts <- c(
"How much verified information about the creation and edits of the picture is available",
"How much of the picture is real/fake",
"How trustworthy the image is",
"Whether AI was used in the image creation process",
"Where the picture was taken",
"When the picture was taken",
"Any changes that have been made to the original",
"The copyright holder or owner of the image",
"The publisher"
)
# 3. Create a flag: TRUE if *all* selected options are in good_opts, FALSE otherwise
post_df <- post_df %>%
mutate(
# split the semicolon‐separated string into a character vector
expectations = str_split(label_expectation, ";"),
# for each row, check if every selected item is in good_opts
good_understanding = sapply(expectations, function(sel) {
# trim whitespace
sel <- str_trim(sel)
# require at least one selection AND no “bad” items
length(sel) > 0 && all(sel %in% good_opts)
})
)
# 4. Quick tabulation of good vs bad by condition
post_df %>%
filter(condition != "nolabel") %>%
group_by(condition) %>%
summarise(
total = n(),
good  = sum(good_understanding),
bad   = total - good,
pct_good = good / total
) %>%
print()
good_opts <- c(
"How much verified information about the creation and edits of the picture is available",
"How much of the picture is real/fake",
"How trustworthy the image is",
"Whether AI was used in the image creation process",
"Where the picture was taken",
"When the picture was taken",
"Any changes that have been made to the original",
"The copyright holder or owner of the image",
"The publisher"
)
# 3. Filter out the 'nolabel' condition and classify expectation quality
summary_df <- post_df %>%
filter(condition != "nolabel") %>%        # drop baseline
mutate(
expectations = str_split(label_expectation, ";"),
good_understanding = sapply(expectations, function(sel) {
sel <- str_trim(sel)
length(sel) > 0 && all(sel %in% good_opts)
})
) %>%
# 4. Summarise by condition
group_by(condition) %>%
summarise(
total     = n(),
good      = sum(good_understanding, na.rm = TRUE),
bad       = total - good,
pct_good  = round(100 * good / total, 1)
)
print(summary_df)
filter(condition != "nolabel") %>%
mutate(
expectations = str_split(label_expectation, ";"),
good_understanding = sapply(expectations, function(sel) {
sel <- str_trim(sel)
length(sel) > 0 && all(sel %in% good_opts)
}),
# make it a factor
good_understanding = factor(good_understanding, levels = c(FALSE, TRUE)),
condition = factor(condition, levels = c("c2pa","color","no_color")),
understood_label = as.numeric(understood_label)
)
# 2) Define your “good” expectation options
good_opts <- c(
"How much verified information about the creation and edits of the picture is available",
"How much of the picture is real/fake",
"How trustworthy the image is",
"Whether AI was used in the image creation process",
"Where the picture was taken",
"When the picture was taken",
"Any changes that have been made to the original",
"The copyright holder or owner of the image",
"The publisher"
)
# 3) Create a clean analysis_df that:
#    • drops the 'nolabel' rows
#    • splits & flags “good_understanding”
#    • makes sure condition is still present and as a factor
analysis_df <- post_df %>%
filter(condition != "nolabel") %>%            # drop the baseline
# split the semicolon‐delimited choices into lists
mutate(expectations = str_split(label_expectation, ";")) %>%
# flag TRUE only if every selected item is in good_opts
mutate(good_understanding = sapply(expectations, function(sel) {
sel <- str_trim(sel)
length(sel) > 0 && all(sel %in% good_opts)
})) %>%
# ensure we have our key columns in the final data frame
select(understood_label, condition, good_understanding) %>%
# coerce to the right types
mutate(
understood_label  = as.numeric(understood_label),
condition         = factor(condition, levels = c("c2pa","color","no_color")),
good_understanding = factor(good_understanding, levels = c(FALSE, TRUE))
)
# Quick sanity check:
str(analysis_df)
# Should show a data.frame with columns:
#  $ understood_label : num
#  $ condition        : Factor w/ 3 levels "c2pa","color","no_color"
#  $ good_understanding: Factor w/ 2 levels "FALSE","TRUE"
# 4) Run the 2‐way ANOVA with interaction
anova_good <- aov(understood_label ~ condition * good_understanding, data = analysis_df)
summary(anova_good)
# 5) Post‐hoc contrasts by condition
emm_good <- emmeans(anova_good, ~ good_understanding | condition)
summary(contrast(emm_good, method="pairwise", adjust="bonferroni"))
library(dplyr)
library(ggplot2)
# 1. Compute group means and 95% CIs
plot_df <- analysis_df %>%
group_by(condition, good_understanding) %>%
summarise(
mean_u = mean(understood_label, na.rm=TRUE),
se     = sd(understood_label, na.rm=TRUE) / sqrt(n()),
ci_lo  = mean_u - 1.96 * se,
ci_hi  = mean_u + 1.96 * se,
.groups = "drop"
)
# 2. Plot with points, error bars, and connecting lines
ggplot(plot_df, aes(x = condition, y = mean_u, color = good_understanding, group = good_understanding)) +
geom_point(size = 3, position = position_dodge(width = 0.3)) +
geom_line(position = position_dodge(width = 0.3)) +
geom_errorbar(aes(ymin = ci_lo, ymax = ci_hi),
width = 0.1, position = position_dodge(width = 0.3)) +
scale_color_manual(values = c("FALSE" = "gray50", "TRUE" = "darkgreen"),
labels = c("Bad Expectations", "Good Expectations")) +
labs(
title = "Label Understanding by Condition & Expectation Quality",
x = "Label Condition",
y = "Mean Understanding Score",
color = "Expectation Quality"
) +
theme_minimal(base_size = 14) +
theme(
plot.title    = element_text(face = "bold", hjust = 0.5),
axis.text.x   = element_text(angle = 15, hjust = 1),
legend.title  = element_text(face = "bold")
)
save.image("myproject_workspace.RData")
savehistory("myproject_history.Rhistory")
