{\rtf1\ansi\ansicpg1252\cocoartf2822
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Times-Roman;\f1\fnil\fcharset0 AppleColorEmoji;\f2\froman\fcharset0 Times-Bold;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red0\green0\blue233;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c0\c0\c93333;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid1\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\paperw11900\paperh16840\margl1440\margr1440\vieww28900\viewh15320\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs29\fsmilli14667 \cf0 \expnd0\expndtw0\kerning0
# Load required libraries\
library(dplyr)\
library(ggplot2)\
library(multcompView)\
library(patchwork)\
library(broom)\
\'a0\
# 1. Filter only 'Article trust' rows\
df <- mid_article %>%\
\'a0 filter(metric == "Article trust")\
\'a0\
# 2. Rename condition levels for two-line horizontal labels in Plot A\
df$condition <- recode(df$condition,\
\'a0 "nolabel"\'a0 = "No\\nLabel",\
\'a0 "color"\'a0\'a0\'a0 = "Color Image\\nTrust Score",\
\'a0 "no_color" = "Black and White\\nImage Trust Score",\
\'a0 "c2pa"\'a0\'a0\'a0\'a0 = "C2PA"\
)\
\'a0\
# 3. Compute mean and SE for each condition\
means_tbl <- df %>%\
\'a0 group_by(condition) %>%\
\'a0 summarise(\
\'a0\'a0\'a0 n = n(),\
\'a0\'a0\'a0 mean_score = mean(score),\
\'a0\'a0\'a0 se_score = sd(score) / sqrt(n),\
\'a0\'a0\'a0 .groups = "drop"\
\'a0 )\
\'a0\
# 4. Run ANOVA\
aov_mod <- aov(score ~ condition, data = df)\
summary(aov_mod)\
\'a0\
# 5. Tukey HSD post-hoc test\
tukey_res <- TukeyHSD(aov_mod, "condition")\
\'a0\
# 6. Prepare Tukey result\
tukey_df <- as.data.frame(tukey_res$condition)\
tukey_df$pair <- rownames(tukey_df)\
\'a0\
# Rename pairwise comparisons and split with slash + newline\
rename_condition <- function(label) \{\
\'a0 label <- gsub("nolabel",\'a0 "No\\nLabel", label)\
\'a0 label <- gsub("color",\'a0\'a0\'a0 "Color Image\\nTrust Score", label)\
\'a0 label <- gsub("no_color", "Black and White\\nImage Trust Score", label)\
\'a0 label <- gsub("c2pa",\'a0\'a0\'a0\'a0 "C2PA", label)\
\'a0 label <- gsub("-",\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "/\\n", label)\
\'a0 return(label)\
\}\
tukey_df$pair <- sapply(tukey_df$pair, rename_condition)\
\'a0\
# Add significance stars\
tukey_df$p_stars <- cut(as.numeric(tukey_df[["p adj"]]),\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 breaks = c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 labels = c("***", "**", "*", ".", "ns"))\
\'a0\
# Format p-values\
tukey_df$p_text <- ifelse(\
\'a0 tukey_df[["p adj"]] < 0.001,\
\'a0 "< 0.001",\
\'a0 paste0("= ", formatC(tukey_df[["p adj"]], format = "f", digits = 3))\
)\
\'a0\
# Combine stars and p-value\
tukey_df$p_label <- paste0(tukey_df$p_stars, " (p ", tukey_df$p_text, ")")\
\'a0\
# 7. Plot A \'97 Mean Article Trust by Condition\
pA <- ggplot(means_tbl, aes(x = condition, y = mean_score)) +\
\'a0 geom_col(fill = "skyblue", width = 0.6) +\
\'a0 geom_errorbar(aes(ymin = mean_score - se_score,\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 ymax = mean_score + se_score),\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 width = 0.2) +\
\'a0 geom_text(aes(label = round(mean_score, 2)),\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 vjust = -1, size = 10, fontface = "bold") +\
\'a0 coord_cartesian(ylim = c(0, max(means_tbl$mean_score + means_tbl$se_score) + 1)) +\
\'a0 labs(\
\'a0\'a0\'a0 title = "A. Mean Article Trust by Condition",\
\'a0\'a0\'a0 x = NULL,\
\'a0\'a0\'a0 y = "Mean Article Trust (1\'967)"\
\'a0 ) +\
\'a0 theme_minimal(base_size = 24) +\
\'a0 theme(\
\'a0\'a0\'a0 axis.text.x = element_text(size = 22, face = "bold"),\
\'a0\'a0\'a0 axis.text.y = element_text(size = 22, face = "bold"),\
\'a0\'a0\'a0 axis.title.y = element_text(size = 24, face = "bold"),\
\'a0\'a0\'a0 plot.title = element_text(size = 26, face = "bold")\
\'a0 )\
\'a0\
# 8. Plot B \'97 Tukey post-hoc results\
pB <- ggplot(tukey_df, aes(x = diff, y = reorder(pair, diff))) +\
\'a0 geom_point(size = 5) +\
\'a0 geom_errorbarh(aes(xmin = lwr, xmax = upr), height = 0.3) +\
\'a0 geom_text(aes(label = p_label),\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 nudge_y = -0.3, size = 8, fontface = "bold") +\
\'a0 geom_vline(xintercept = 0, linetype = "dashed") +\
\'a0 labs(\
\'a0\'a0\'a0 title = "B. Tukey HSD Post-Hoc Differences",\
\'a0\'a0\'a0 x = "Difference in Mean Article Trust",\
\'a0\'a0\'a0 y = NULL\
\'a0 ) +\
\'a0 theme_bw(base_size = 24) +\
\'a0 theme(\
\'a0\'a0\'a0 axis.text.y = element_text(size = 22, face = "bold", lineheight = 1.1),\
\'a0\'a0\'a0 axis.text.x = element_text(size = 22, face = "bold"),\
\'a0\'a0\'a0 axis.title.x = element_text(size = 24, face = "bold"),\
\'a0\'a0\'a0 plot.title = element_text(size = 26, face = "bold")\
\'a0 ) +\
\'a0 xlim(min(tukey_df$lwr) - 0.3, max(tukey_df$upr) + 1)\
\'a0\
# 9. Combine both panels\
final_plot <- (pA + pB) +\
\'a0 plot_layout(ncol = 2) &\
\'a0 plot_annotation(tag_levels = "A",\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 theme = theme(plot.title = element_text(size = 26, face = "bold")))\
\'a0\
# 10. Show plot\
print(final_plot)\
library(dplyr)\
library(ggplot2)\
library(stringr)\
library(tidyr)\
library(forcats)\
library(patchwork)\
\'a0\
# Panel A: mean selection rate per interpretation option\
df_means <- usage_long %>%\
\'a0 group_by(score_meaning) %>%\
\'a0 summarise(mean_usage = mean(usage), .groups="drop") %>%\
\'a0 # wrap long labels to ~25 chars\
\'a0 mutate(label_wrapped = str_wrap(score_meaning, width = 25))\
\'a0\
pA <- ggplot(df_means, aes(x = mean_usage, y = fct_reorder(label_wrapped, mean_usage))) +\
\'a0 geom_col(fill = "#4C78A8", width = 0.6) +\
\'a0 geom_text(aes(label = scales::percent(mean_usage, accuracy = 1)),\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 hjust = -0.05, size = 4) +\
\'a0 scale_x_continuous(\
\'a0\'a0\'a0 labels = scales::percent_format(1),\
\'a0\'a0\'a0 expand = expansion(mult = c(0, 0.15))\
\'a0 ) +\
\'a0 labs(\
\'a0\'a0\'a0 title = "A. Mean Reported Label Interpretation",\
\'a0\'a0\'a0 x\'a0\'a0\'a0\'a0 = "Mean Selection Rate",\
\'a0\'a0\'a0 y\'a0\'a0\'a0\'a0 = NULL\
\'a0 ) +\
\'a0 theme_minimal(base_size = 14) +\
\'a0 theme(\
\'a0\'a0\'a0 plot.title\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 = element_text(face = "bold", size = 16),\
\'a0\'a0\'a0 axis.text.y\'a0\'a0\'a0\'a0\'a0\'a0\'a0 = element_text(size = 12),\
\'a0\'a0\'a0 axis.text.x\'a0\'a0\'a0\'a0\'a0\'a0\'a0 = element_text(size = 12),\
\'a0\'a0\'a0 axis.title.x\'a0\'a0\'a0\'a0\'a0\'a0 = element_text(face = "bold", size = 14),\
\'a0\'a0\'a0 panel.grid.major.y = element_blank(),\
\'a0\'a0\'a0 plot.margin\'a0\'a0\'a0\'a0\'a0\'a0\'a0 = margin(10, 10, 10, 10)\
\'a0 )\
\'a0\
# Panel B: Tukey HSD post-hoc differences\
aov_fit <- aov(usage ~ score_meaning, data = usage_long)\
tuk <- TukeyHSD(aov_fit, "score_meaning")$score_meaning %>%\
\'a0 as.data.frame() %>%\
\'a0 rownames_to_column("comparison") %>%\
\'a0 rename(\
\'a0\'a0\'a0 Difference = diff,\
\'a0\'a0\'a0 lower_CL\'a0\'a0 = lwr,\
\'a0\'a0\'a0 upper_CL\'a0\'a0 = upr,\
\'a0\'a0\'a0 p_adj\'a0\'a0\'a0\'a0\'a0 = `p adj`\
\'a0 ) %>%\
\'a0 separate(comparison, into = c("g1","g2"), sep = "-") %>%\
\'a0 mutate(\
\'a0\'a0\'a0 comp_label = str_wrap(paste(g1, "\'96", g2), width = 25),\
\'a0\'a0\'a0 signif\'a0\'a0\'a0\'a0 = case_when(\
\'a0\'a0\'a0\'a0\'a0 p_adj < 0.001 ~ "***",\
\'a0\'a0\'a0\'a0\'a0 p_adj < 0.01\'a0 ~ "**",\
\'a0\'a0\'a0\'a0\'a0 p_adj < 0.05\'a0 ~ "*",\
\'a0\'a0\'a0\'a0\'a0 TRUE\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 ~ ""\
\'a0\'a0\'a0 )\
\'a0 ) %>%\
\'a0 arrange(Difference) %>%\
\'a0 mutate(comp_label = factor(comp_label, levels = comp_label))\
\'a0\
pB <- ggplot(tuk, aes(x = Difference, y = comp_label)) +\
\'a0 geom_vline(xintercept = 0, linetype = "dashed", color = "gray60") +\
\'a0 geom_errorbarh(aes(xmin = lower_CL, xmax = upper_CL), height = 0.25) +\
\'a0 geom_point(size = 3, color = "#4C78A8") +\
\'a0 geom_text(aes(label = signif),\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 nudge_x = ifelse(tuk$Difference > 0, 0.02, -0.02),\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 size = 5) +\
\'a0 labs(\
\'a0\'a0\'a0 title = "B. Tukey HSD Post-Hoc Differences",\
\'a0\'a0\'a0 x\'a0\'a0\'a0\'a0 = "Difference in Mean Selection Rate",\
\'a0\'a0\'a0 y\'a0\'a0\'a0\'a0 = NULL\
\'a0 ) +\
\'a0 theme_minimal(base_size = 14) +\
\'a0 theme(\
\'a0\'a0\'a0 plot.title\'a0\'a0 = element_text(face = "bold", size = 16),\
\'a0\'a0\'a0 axis.text.y\'a0 = element_text(size = 10),\
\'a0\'a0\'a0 axis.text.x\'a0 = element_text(size = 12),\
\'a0\'a0\'a0 axis.title.x = element_text(face = "bold", size = 14),\
\'a0\'a0\'a0 plot.margin\'a0 = margin(10, 10, 10, 10)\
\'a0 )\
\'a0\
# Combine panels side-by-side\
(fig3_post <- pA | pB + plot_layout(widths = c(1,1)))\
# Load required packages\
library(ggplot2)\
library(dplyr)\
\'a0\
# 1. Data prep\
df <- post_df %>%\
\'a0 filter(condition != "nolabel") %>%\
\'a0 mutate(\
\'a0\'a0\'a0 condition = factor(\
\'a0\'a0\'a0\'a0\'a0 condition,\
\'a0\'a0\'a0\'a0\'a0 levels = c("no_color", "color", "c2pa"),\
\'a0\'a0\'a0\'a0\'a0 labels = c(\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "Black & White Image Trust Score",\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "Color Image Trust Score",\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "C2PA"\
\'a0\'a0\'a0\'a0\'a0 )\
\'a0\'a0\'a0 )\
\'a0 )\
\'a0\
# 2. Plot with EXTRA LARGE text\
ggplot(df, aes(x = condition, y = understood_label, fill = condition)) +\
\'a0\
\'a0 # Boxplots\
\'a0 geom_boxplot(alpha = 0.9, color = "black", size = 2) +\
\'a0\
\'a0 # Jittered points\
\'a0 geom_jitter(width = 0.15, alpha = 0.5, color = "gray30", size = 3) +\
\'a0\
\'a0 # White-filled diamond for mean\
\'a0 stat_summary(\
\'a0\'a0\'a0 fun = mean,\
\'a0\'a0\'a0 geom = "point",\
\'a0\'a0\'a0 shape = 23,\
\'a0\'a0\'a0 size = 8,\
\'a0\'a0\'a0 fill = "white",\
\'a0\'a0\'a0 color = "black",\
\'a0\'a0\'a0 stroke = 1.5,\
\'a0\'a0\'a0 position = position_dodge(width = 0.8)\
\'a0 ) +\
\'a0\
\'a0 # Bold mean text\
\'a0 stat_summary(\
\'a0\'a0\'a0 fun = mean,\
\'a0\'a0\'a0 geom = "text",\
\'a0\'a0\'a0 aes(label = round(..y.., 2)),\
\'a0\'a0\'a0 vjust = -1.5,\
\'a0\'a0\'a0 size = 10,\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 # 
\f1 \uc0\u11013 \u65039 
\f0  VERY BIG TEXT\
\'a0\'a0\'a0 fontface = "bold",\
\'a0\'a0\'a0 position = position_dodge(width = 0.8)\
\'a0 ) +\
\'a0\
\'a0 # Custom colors\
\'a0 scale_fill_manual(values = c("tomato", "forestgreen", "dodgerblue3")) +\
\'a0\
\'a0 # Labels\
\'a0 labs(\
\'a0\'a0\'a0 title = "Self-Reported Understanding of the Label by Condition",\
\'a0\'a0\'a0 x = "Condition",\
\'a0\'a0\'a0 y = "Self-Reported Understanding\\n(1 = not at all \'85 7 = completely)"\
\'a0 ) +\
\'a0\
\'a0 # Theme with very large font size\
\'a0 theme_minimal(base_size = 30) +\'a0 # 
\f1 \uc0\u11013 \u65039 
\f0  GLOBAL FONT SIZE\
\'a0\
\'a0 theme(\
\'a0\'a0\'a0 plot.title\'a0\'a0\'a0\'a0\'a0\'a0 = element_text(size = 40, face = "bold", hjust = 0.5),\
\'a0\'a0\'a0 axis.title.x\'a0\'a0\'a0\'a0 = element_text(size = 35, face = "bold"),\
\'a0\'a0\'a0 axis.title.y\'a0\'a0\'a0\'a0 = element_text(size = 35, face = "bold"),\
\'a0\'a0\'a0 axis.text.x\'a0\'a0\'a0\'a0\'a0 = element_text(size = 30, face = "bold"),\
\'a0\'a0\'a0 axis.text.y\'a0\'a0\'a0\'a0\'a0 = element_text(size = 30, face = "bold"),\
\'a0\'a0\'a0 legend.position\'a0 = "none",\
\'a0\'a0\'a0 panel.grid.minor = element_blank()\
\'a0 )\
> library(ggplot2)\
> library(dplyr)\
> library(ggpubr)\
>\
> # Prepare and rename conditions, set factor levels\
> df <- post_df %>%\
+\'a0\'a0\'a0\'a0 filter(condition != "nolabel") %>%\
+\'a0\'a0\'a0\'a0 mutate(\
+\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 familiar_trust_levels = ifelse(is.na(familiar_trust_levels), "Not sure", familiar_trust_levels),\
+\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 familiar_nutriscore\'a0\'a0\'a0 = ifelse(is.na(familiar_nutriscore),\'a0\'a0\'a0 "Not sure", familiar_nutriscore),\
+\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 familiar_trust_levels = factor(familiar_trust_levels, levels = c("Yes","No","Not sure")),\
+\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 familiar_nutriscore\'a0\'a0 = factor(familiar_nutriscore,\'a0\'a0 levels = c("Yes","No","Not sure")),\
+\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 condition = recode(condition,\
+\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 c2pa\'a0\'a0\'a0\'a0 = "C2PA",\
+\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 color\'a0\'a0\'a0 = "Color Image Trust Score",\
+\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 no_color = "Black and White Image Trust Score"\
+\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 )\
+\'a0\'a0\'a0\'a0 )\
>\
> # Function to add mean labels\
> mean_labels <- function(...) \{\
+\'a0\'a0\'a0\'a0 stat_summary(\
+\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 fun = mean,\
+\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 geom = "text",\
+\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 aes(label = round(..y..,2)),\
+\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 position = position_dodge(width = 0.75),\
+\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 vjust = -0.5,\
+\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 size = 3\
+\'a0\'a0\'a0\'a0 )\
+ \}\
>\
> # Plot A: Combined conditions, Familiarity with Trust Labels vs Understanding\
> plot_a <- df %>%\
+\'a0\'a0\'a0\'a0 ggplot(aes(x = familiar_trust_levels, y = understood_label, fill = condition)) +\
+\'a0\'a0\'a0\'a0 geom_boxplot(alpha = 0.7, outlier.shape = NA, position = position_dodge(width = 0.75)) +\
+\'a0\'a0\'a0\'a0 geom_jitter(aes(color = condition), alpha = 0.5,\
+\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 position = position_jitterdodge(jitter.width = 0.2, dodge.width = 0.75),\
+\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 show.legend = FALSE) +\
+\'a0\'a0\'a0\'a0 mean_labels() +\
+\'a0\'a0\'a0\'a0 labs(\
+\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 x = "Are you familiar with trust levels on social media (e.g., verification badges)?",\
+\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 y = "Self-reported Understanding (1\'967)",\
+\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 title = "Understanding by Prior Trust Labels Familiarity on Social Media"\
+\'a0\'a0\'a0\'a0 ) +\
+\'a0\'a0\'a0\'a0 scale_fill_brewer(palette = "Set2") +\
+\'a0\'a0\'a0\'a0 scale_x_discrete(labels = c("Yes" = "Yes", "No" = "No", "Not sure" = "Not sure")) +\
+\'a0\'a0\'a0\'a0 theme_minimal() +\
+\'a0\'a0\'a0\'a0 theme(legend.position = "top")\
>\
> # Plot B: Combined conditions (excluding C2PA), Familiarity with Nutri-Score vs Understanding: Combined conditions (excluding C2PA), Familiarity with Nutri-Score vs Understanding\
> plot_b <- df %>%\
+\'a0\'a0\'a0\'a0 filter(condition != "C2PA") %>%\
+\'a0\'a0\'a0\'a0 ggplot(aes(x = familiar_nutriscore, y = understood_label, fill = condition)) +\
+\'a0\'a0\'a0\'a0 geom_boxplot(alpha = 0.7, outlier.shape = NA, position = position_dodge(width = 0.75)) +\
+\'a0\'a0\'a0\'a0 geom_jitter(aes(color = condition), alpha = 0.5,\
+\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 position = position_jitterdodge(jitter.width = 0.2, dodge.width = 0.75),\
+\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 show.legend = FALSE) +\
+\'a0\'a0\'a0\'a0 mean_labels() +\
+\'a0\'a0\'a0\'a0 labs(\
+\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 x = "Are you familiar with the nutriscore front-of-pack food label?",\
+\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 y = "Self-reported Understanding (1\'967)",\
+\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 title = "Understanding by Prior Nutri-Score Familiarity (excluding C2PA)"\
+\'a0\'a0\'a0\'a0 ) +\
+\'a0\'a0\'a0\'a0 scale_fill_brewer(palette = "Set2") +\
+\'a0\'a0\'a0\'a0 theme_minimal() +\
+\'a0\'a0\'a0\'a0 theme(legend.position = "top")\
>\
> # Combine both plots\
> ggarrange(plot_a, plot_b, ncol = 2, labels = c("A", "B"), align = "hv")\
# Load required libraries\
library(dplyr)\
library(ggplot2)\
library(multcompView)\
library(patchwork)\
library(broom)\
\'a0\
# 1. Keep all conditions (including "nolabel") and select rows with a trust_image rating\
df_img <- mid2 %>%\
\'a0 filter(!is.na(trust_image))\
\'a0\
# 2. Rename condition levels for two-line horizontal labels in Plot A\
df_img$condition <- recode(df_img$condition,\
\'a0 "nolabel"\'a0 = "No\\nLabel",\
\'a0 "color"\'a0\'a0\'a0 = "Color Image\\nTrust Score",\
\'a0 "no_color" = "Black and White\\nImage Trust Score",\
\'a0 "c2pa"\'a0\'a0\'a0\'a0 = "C2PA"\
)\
\'a0\
# 3. Compute mean and SE of trust_image for each condition\
means_img <- df_img %>%\
\'a0 group_by(condition) %>%\
\'a0 summarise(\
\'a0\'a0\'a0 n = n(),\
\'a0\'a0\'a0 mean_trust = mean(trust_image),\
\'a0\'a0\'a0 se_trust = sd(trust_image) / sqrt(n),\
\'a0\'a0\'a0 .groups = "drop"\
\'a0 )\
\'a0\
# 4. One-way ANOVA\
aov_img <- aov(trust_image ~ condition, data = df_img)\
summary(aov_img)\
\'a0\
# 5. Tukey HSD post-hoc test\
tukey_img_res <- TukeyHSD(aov_img, "condition")\
\'a0\
# 6. Tidy results\
tukey_img <- as.data.frame(tukey_img_res$condition)\
tukey_img$pair <- rownames(tukey_img)\
\'a0\
# Relabel comparisons\
rename_pair <- function(lbl) \{\
\'a0 lbl <- gsub("nolabel",\'a0 "No\\nLabel", lbl)\
\'a0 lbl <- gsub("color",\'a0\'a0\'a0 "Color Image\\nTrust Score", lbl)\
\'a0 lbl <- gsub("no_color", "Black and White\\nImage Trust Score", lbl)\
\'a0 lbl <- gsub("c2pa",\'a0\'a0\'a0\'a0 "C2PA", lbl)\
\'a0 lbl <- gsub("-",\'a0\'a0\'a0\'a0\'a0\'a0\'a0 "/\\n", lbl)\
\'a0 lbl\
\}\
tukey_img$pair <- sapply(tukey_img$pair, rename_pair)\
\'a0\
# Add significance\
tukey_img$p_stars <- case_when(\
\'a0 tukey_img$`p adj` < 0.001 ~ "***",\
\'a0 tukey_img$`p adj` < 0.01 ~ "**",\
\'a0 tukey_img$`p adj` < 0.05 ~ "*",\
\'a0 TRUE ~ "ns"\
)\
\'a0\
tukey_img$p_text <- ifelse(\
\'a0 tukey_img$`p adj` < 0.001,\
\'a0 "< 0.001",\
\'a0 paste0("= ", formatC(tukey_img$`p adj`, format = "f", digits = 3))\
)\
\'a0\
tukey_img$p_label <- paste0(tukey_img$p_stars, " (p ", tukey_img$p_text, ")")\
\'a0\
# 7. Plot A \'97 Mean trust\
pA_img <- ggplot(means_img, aes(x = condition, y = mean_trust)) +\
\'a0 geom_col(fill = "skyblue", width = 0.6) +\
\'a0 geom_errorbar(aes(ymin = mean_trust - se_trust,\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 ymax = mean_trust + se_trust),\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 width = 0.3) +\
\'a0 geom_text(aes(label = round(mean_trust, 2)),\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 vjust = -1, size = 10, fontface = "bold") +\
\'a0 coord_cartesian(ylim = c(0, max(means_img$mean_trust + means_img$se_trust) + 1)) +\
\'a0 labs(\
\'a0\'a0\'a0 title = "A. Mean Image Trust by Condition",\
\'a0\'a0\'a0 x = NULL,\
\'a0\'a0\'a0 y = "Mean Image Trust (1\'967)"\
\'a0 ) +\
\'a0 theme_minimal(base_size = 24) +\
\'a0 theme(\
\'a0\'a0\'a0 axis.text.x = element_text(size = 22, face = "bold"),\
\'a0\'a0\'a0 axis.text.y = element_text(size = 22, face = "bold"),\
\'a0\'a0\'a0 axis.title.y = element_text(size = 24, face = "bold"),\
\'a0\'a0\'a0 plot.title = element_text(size = 26, face = "bold")\
\'a0 )\
\'a0\
# 8. Plot B \'97 Tukey differences\
pB_img <- ggplot(tukey_img, aes(x = diff, y = reorder(pair, diff))) +\
\'a0 geom_point(size = 5) +\
\'a0 geom_errorbarh(aes(xmin = lwr, xmax = upr), height = 0.3) +\
\'a0 geom_text(aes(label = p_label), nudge_y = -0.3, size = 8, fontface = "bold") +\
\'a0 geom_vline(xintercept = 0, linetype = "dashed") +\
\'a0 labs(\
\'a0\'a0\'a0 title = "B. Tukey HSD Post-Hoc Differences",\
\'a0\'a0\'a0 x = "Difference in Mean Image Trust",\
\'a0\'a0\'a0 y = NULL\
\'a0 ) +\
\'a0 theme_bw(base_size = 24) +\
\'a0 theme(\
\'a0\'a0\'a0 axis.text.y = element_text(size = 22, face = "bold", lineheight = 1.1),\
\'a0\'a0\'a0 axis.text.x = element_text(size = 22, face = "bold"),\
\'a0\'a0\'a0 axis.title.x = element_text(size = 24, face = "bold"),\
\'a0\'a0\'a0 plot.title = element_text(size = 26, face = "bold")\
\'a0 ) +\
\'a0 xlim(min(tukey_img$lwr) - 0.3, max(tukey_img$upr) + 1)\
\'a0\
# 9. Combine panels\
final_img_plot <- (pA_img + pB_img) +\
\'a0 plot_layout(ncol = 2) &\
\'a0 plot_annotation(tag_levels = "A",\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 theme = theme(plot.title = element_text(size = 26, face = "bold")))\
\'a0\
# 10. Print\
print(final_img_plot)\
\
\'a0\
\
\'a0\
library(dplyr)\
library(ggplot2)\
library(stringr)\
library(tidyr)\
library(forcats)\
library(patchwork)\
\'a0\
# === LABEL MAP ===\
label_map <- c(\
\'a0 "How trustworthy the image is" = "a",\
\'a0 "How much verified information about the creation and edits of the picture is available" = "b",\
\'a0 "How trustworthy the article is" = "c",\
\'a0 "How much of the picture is real/fake" = "d",\
\'a0 "How much readers like the article" = "e"\
)\
\'a0\
# === Prepare data ===\
usage_long <- usage_long %>%\
\'a0 mutate(score_letter = recode(score_meaning, !!!label_map))\
\'a0\
df_means <- usage_long %>%\
\'a0 group_by(score_meaning, score_letter) %>%\
\'a0 summarise(mean_usage = mean(usage), .groups = "drop") %>%\
\'a0 mutate(\
\'a0\'a0\'a0 label_wrapped = score_letter\'a0 # Use only letters\
\'a0 )\
\'a0\
# === Plot A ===\
pA <- ggplot(df_means, aes(x = mean_usage, y = fct_reorder(label_wrapped, mean_usage))) +\
\'a0 geom_col(fill = "#4C78A8", width = 0.6) +\
\'a0 geom_text(aes(label = scales::percent(mean_usage, accuracy = 1)),\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 hjust = -0.05, size = 8, fontface = "bold") +\
\'a0 scale_x_continuous(\
\'a0\'a0\'a0 labels = scales::percent_format(1),\
\'a0\'a0\'a0 expand = expansion(mult = c(0, 0.15))\
\'a0 ) +\
\'a0 labs(\
\'a0\'a0\'a0 title = "A. Mean Reported Label Interpretation",\
\'a0\'a0\'a0 x = "Mean Selection Rate", y = NULL\
\'a0 ) +\
\'a0 theme_minimal(base_size = 18) +\
\'a0 theme(\
\'a0\'a0\'a0 plot.title\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 = element_text(face = "bold", size = 24),\
\'a0\'a0\'a0 axis.text.y\'a0\'a0\'a0\'a0\'a0\'a0\'a0 = element_text(size = 20, face = "bold"),\
\'a0\'a0\'a0 axis.text.x\'a0\'a0\'a0\'a0\'a0\'a0\'a0 = element_text(size = 18, face = "bold"),\
\'a0\'a0\'a0 axis.title.x\'a0\'a0\'a0\'a0\'a0\'a0 = element_text(face = "bold", size = 20),\
\'a0\'a0\'a0 panel.grid.major.y = element_blank(),\
\'a0\'a0\'a0 plot.margin\'a0\'a0\'a0\'a0\'a0\'a0\'a0 = margin(15, 15, 15, 15)\
\'a0 )\
\'a0\
# === Tukey HSD ===\
aov_fit <- aov(usage ~ score_letter, data = usage_long)\
tuk <- TukeyHSD(aov_fit, "score_letter")$score_letter %>%\
\'a0 as.data.frame() %>%\
\'a0 rownames_to_column("comparison") %>%\
\'a0 rename(Difference = diff, lower_CL = lwr, upper_CL = upr, p_adj = `p adj`) %>%\
\'a0 separate(comparison, into = c("g1", "g2"), sep = "-") %>%\
\'a0 mutate(\
\'a0\'a0\'a0 comp_label = paste0(g1, ") \'96 ", g2, ")"),\
\'a0\'a0\'a0 signif = case_when(\
\'a0\'a0\'a0\'a0\'a0 p_adj < 0.001 ~ "***",\
\'a0\'a0\'a0\'a0\'a0 p_adj < 0.01\'a0 ~ "**",\
\'a0\'a0\'a0\'a0\'a0 p_adj < 0.05\'a0 ~ "*",\
\'a0\'a0\'a0\'a0\'a0 TRUE\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 ~ ""\
\'a0\'a0\'a0 ),\
\'a0\'a0\'a0 p_text = paste0("(p = ", signif(p_adj, 3), ")")\
\'a0 ) %>%\
\'a0 arrange(Difference) %>%\
\'a0 mutate(comp_label = factor(comp_label, levels = comp_label))\
\'a0\
# === Plot B ===\
pB <- ggplot(tuk, aes(x = Difference, y = comp_label)) +\
\'a0 geom_vline(xintercept = 0, linetype = "dashed", color = "gray60") +\
\'a0 geom_errorbarh(aes(xmin = lower_CL, xmax = upper_CL), height = 0.25) +\
\'a0 geom_point(size = 3.5, color = "#4C78A8") +\
\'a0 geom_text(aes(label = paste0(signif, "\\n", p_text)),\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 nudge_x = ifelse(tuk$Difference > 0, 0.02, -0.02),\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 size = 6.5, hjust = ifelse(tuk$Difference > 0, 0, 1), fontface = "bold") +\
\'a0 labs(\
\'a0\'a0\'a0 title = "B. Tukey HSD Post-Hoc Differences",\
\'a0\'a0\'a0 x = "Difference in Mean Selection Rate", y = NULL\
\'a0 ) +\
\'a0 theme_minimal(base_size = 18) +\
\'a0 theme(\
\'a0\'a0\'a0 plot.title\'a0\'a0 = element_text(face = "bold", size = 24),\
\'a0\'a0\'a0 axis.text.y\'a0 = element_text(size = 18, face = "bold"),\
\'a0\'a0\'a0 axis.text.x\'a0 = element_text(size = 18, face = "bold"),\
\'a0\'a0\'a0 axis.title.x = element_text(face = "bold", size = 20),\
\'a0\'a0\'a0 plot.margin\'a0 = margin(15, 15, 15, 15)\
\'a0 )\
\'a0\
# === Legend Panel ===\
legend_text <- paste0(\
\'a0 "a) How trustworthy the image is\\n",\
\'a0 "b) How much verified information about the creation and edits of the picture is available\\n",\
\'a0 "c) How trustworthy the article is\\n",\
\'a0 "d) How much of the picture is real/fake\\n",\
\'a0 "e) How much readers like the article"\
)\
\'a0\
legend <- ggplot() +\
\'a0 annotate("text", x = 0.5, y = 0, label = legend_text,\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 size = 6.5, hjust = 0.5, fontface = "bold", lineheight = 1.4) +\
\'a0 theme_void()\
\'a0\
# === Combine all ===\
final_plot <- (pA | pB) / legend + plot_layout(heights = c(1, 0.3))\
\'a0\
# === Output ===\
final_plot\
library(dplyr)\
library(ggplot2)\
library(stringr)\
library(tidyr)\
library(forcats)\
library(patchwork)\
\'a0\
# === LABEL MAP ===\
label_map <- c(\
\'a0 "How trustworthy the image is" = "a",\
\'a0 "How much verified information about the creation and edits of the picture is available" = "b",\
\'a0 "How trustworthy the article is" = "c",\
\'a0 "How much of the picture is real/fake" = "d",\
\'a0 "How much readers like the article" = "e"\
)\
\'a0\
# === Prepare data ===\
usage_long <- usage_long %>%\
\'a0 mutate(score_letter = recode(score_meaning, !!!label_map))\
\'a0\
df_means <- usage_long %>%\
\'a0 group_by(score_meaning, score_letter) %>%\
\'a0 summarise(mean_usage = mean(usage), .groups = "drop") %>%\
\'a0 mutate(\
\'a0\'a0\'a0 label_wrapped = score_letter\'a0 # Use only letters\
\'a0 )\
\'a0\
# === Plot A ===\
pA <- ggplot(df_means, aes(x = mean_usage, y = fct_reorder(label_wrapped, mean_usage))) +\
\'a0 geom_col(fill = "#4C78A8", width = 0.6) +\
\'a0 geom_text(aes(label = scales::percent(mean_usage, accuracy = 1)),\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 hjust = -0.05, size = 8, fontface = "bold") +\
\'a0 scale_x_continuous(\
\'a0\'a0\'a0 labels = scales::percent_format(1),\
\'a0\'a0\'a0 expand = expansion(mult = c(0, 0.15))\
\'a0 ) +\
\'a0 labs(\
\'a0\'a0\'a0 title = "A. Mean Reported Label Interpretation",\
\'a0\'a0\'a0 x = "Mean Selection Rate", y = NULL\
\'a0 ) +\
\'a0 theme_minimal(base_size = 18) +\
\'a0 theme(\
\'a0\'a0\'a0 plot.title\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 = element_text(face = "bold", size = 24),\
\'a0\'a0\'a0 axis.text.y\'a0\'a0\'a0\'a0\'a0\'a0\'a0 = element_text(size = 20, face = "bold"),\
\'a0\'a0\'a0 axis.text.x\'a0\'a0\'a0\'a0\'a0\'a0\'a0 = element_text(size = 18, face = "bold"),\
\'a0\'a0\'a0 axis.title.x\'a0\'a0\'a0\'a0\'a0\'a0 = element_text(face = "bold", size = 20),\
\'a0\'a0\'a0 panel.grid.major.y = element_blank(),\
\'a0\'a0\'a0 plot.margin\'a0\'a0\'a0\'a0\'a0\'a0\'a0 = margin(15, 15, 15, 15)\
\'a0 )\
\'a0\
# === Tukey HSD ===\
aov_fit <- aov(usage ~ score_letter, data = usage_long)\
tuk <- TukeyHSD(aov_fit, "score_letter")$score_letter %>%\
\'a0 as.data.frame() %>%\
\'a0 rownames_to_column("comparison") %>%\
\'a0 rename(Difference = diff, lower_CL = lwr, upper_CL = upr, p_adj = `p adj`) %>%\
\'a0 separate(comparison, into = c("g1", "g2"), sep = "-") %>%\
\'a0 mutate(\
\'a0\'a0\'a0 comp_label = paste0(g1, ") \'96 ", g2, ")"),\
\'a0\'a0\'a0 signif = case_when(\
\'a0\'a0\'a0\'a0\'a0 p_adj < 0.001 ~ "***",\
\'a0\'a0\'a0\'a0\'a0 p_adj < 0.01\'a0 ~ "**",\
\'a0\'a0\'a0\'a0\'a0 p_adj < 0.05\'a0 ~ "*",\
\'a0\'a0\'a0\'a0\'a0 TRUE\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 ~ ""\
\'a0\'a0\'a0 ),\
\'a0\'a0\'a0 p_text = paste0("(p = ", signif(p_adj, 3), ")")\
\'a0 ) %>%\
\'a0 arrange(Difference) %>%\
\'a0 mutate(comp_label = factor(comp_label, levels = comp_label))\
\'a0\
# === Plot B ===\
pB <- ggplot(tuk, aes(x = Difference, y = comp_label)) +\
\'a0 geom_vline(xintercept = 0, linetype = "dashed", color = "gray60") +\
\'a0 geom_errorbarh(aes(xmin = lower_CL, xmax = upper_CL), height = 0.25) +\
\'a0 geom_point(size = 3.5, color = "#4C78A8") +\
\'a0 geom_text(aes(label = paste0(signif, "\\n", p_text)),\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 nudge_x = ifelse(tuk$Difference > 0, 0.02, -0.02),\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 size = 6.5, hjust = ifelse(tuk$Difference > 0, 0, 1), fontface = "bold") +\
\'a0 labs(\
\'a0\'a0\'a0 title = "B. Tukey HSD Post-Hoc Differences",\
\'a0\'a0\'a0 x = "Difference in Mean Selection Rate", y = NULL\
\'a0 ) +\
\'a0 theme_minimal(base_size = 18) +\
\'a0 theme(\
\'a0\'a0\'a0 plot.title\'a0\'a0 = element_text(face = "bold", size = 24),\
\'a0\'a0\'a0 axis.text.y\'a0 = element_text(size = 18, face = "bold"),\
\'a0\'a0\'a0 axis.text.x\'a0 = element_text(size = 18, face = "bold"),\
\'a0\'a0\'a0 axis.title.x = element_text(face = "bold", size = 20),\
\'a0\'a0\'a0 plot.margin\'a0 = margin(15, 15, 15, 15)\
\'a0 )\
\'a0\
# === Combine plots without legend ===\
final_plot <- pA | pB\
final_plot\
# Load required libraries\
library(dplyr)\
library(ggplot2)\
library(multcompView)\
library(patchwork)\
library(broom)\
\'a0\
# 1. Filter only 'Article trust' rows\
df <- mid_article %>%\
\'a0 filter(metric == "Article trust")\
\'a0\
# 2. Add condition letters for plot, full names for Overleaf\
df <- df %>%\
\'a0 mutate(\
\'a0\'a0\'a0 condition_letter = recode(condition,\
\'a0\'a0\'a0\'a0\'a0 "color" = "a",\
\'a0\'a0\'a0\'a0\'a0 "no_color" = "b",\
\'a0\'a0\'a0\'a0\'a0 "c2pa" = "c",\
\'a0\'a0\'a0\'a0\'a0 "nolabel" = "d"\
\'a0\'a0\'a0 )\
\'a0 )\
\'a0\
df$condition_letter <- factor(df$condition_letter, levels = c("a", "b", "c", "d"))\
\'a0\
# 3. Compute means and SE\
means_tbl <- df %>%\
\'a0 group_by(condition_letter) %>%\
\'a0 summarise(\
\'a0\'a0\'a0 n = n(),\
\'a0\'a0\'a0 mean_score = mean(score),\
\'a0\'a0\'a0 se_score = sd(score) / sqrt(n),\
\'a0\'a0\'a0 .groups = "drop"\
\'a0 )\
\'a0\
# 4. Run ANOVA\
aov_mod <- aov(score ~ condition_letter, data = df)\
summary(aov_mod)\
\'a0\
# 5. Tukey HSD\
tukey_res <- TukeyHSD(aov_mod, "condition_letter")\
tukey_df <- as.data.frame(tukey_res$condition_letter)\
tukey_df$pair <- rownames(tukey_df)\
\'a0\
# 6. Significance formatting\
tukey_df$p_stars <- cut(as.numeric(tukey_df[["p adj"]]),\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 breaks = c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 labels = c("***", "**", "*", ".", "ns"))\
tukey_df$p_text <- ifelse(\
\'a0 tukey_df[["p adj"]] < 0.001,\
\'a0 "< 0.001",\
\'a0 paste0("= ", formatC(tukey_df[["p adj"]], format = "f", digits = 3))\
)\
tukey_df$p_label <- paste0(tukey_df$p_stars, " (p ", tukey_df$p_text, ")")\
\'a0\
# 7. Plot A \'97 mean trust bar plot with letters\
pA <- ggplot(means_tbl, aes(x = condition_letter, y = mean_score)) +\
\'a0 geom_col(fill = "#0072B2", width = 0.6) +\
\'a0 geom_errorbar(aes(ymin = mean_score - se_score,\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 ymax = mean_score + se_score), width = 0.2) +\
\'a0 geom_text(aes(label = round(mean_score, 2)),\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 vjust = -1, size = 10, fontface = "bold") +\
\'a0 coord_cartesian(ylim = c(0, max(means_tbl$mean_score + means_tbl$se_score) + 1)) +\
\'a0 labs(\
\'a0\'a0\'a0 title = "A. Mean Article Trust by Condition",\
\'a0\'a0\'a0 x = NULL,\
\'a0\'a0\'a0 y = "Mean Article Trust (1\'967)"\
\'a0 ) +\
\'a0 theme_minimal(base_size = 24) +\
\'a0 theme(\
\'a0\'a0\'a0 axis.text.x = element_text(size = 22, face = "bold"),\
\'a0\'a0\'a0 axis.text.y = element_text(size = 22, face = "bold"),\
\'a0\'a0\'a0 axis.title.y = element_text(size = 24, face = "bold"),\
\'a0\'a0\'a0 plot.title = element_text(size = 26, face = "bold"),\
\'a0\'a0\'a0 legend.position = "none"\
\'a0 )\
\'a0\
# 8. Plot B \'97 Tukey post-hoc\
pB <- ggplot(tukey_df, aes(x = diff, y = reorder(pair, diff))) +\
\'a0 geom_point(size = 5) +\
\'a0 geom_errorbarh(aes(xmin = lwr, xmax = upr), height = 0.3) +\
\'a0 geom_text(aes(label = p_label), nudge_y = -0.3, size = 8, fontface = "bold") +\
\'a0 geom_vline(xintercept = 0, linetype = "dashed") +\
\'a0 labs(\
\'a0\'a0\'a0 title = "B. Tukey HSD Post-Hoc Differences",\
\'a0\'a0\'a0 x = "Difference in Mean Article Trust",\
\'a0\'a0\'a0 y = NULL\
\'a0 ) +\
\'a0 theme_bw(base_size = 24) +\
\'a0 theme(\
\'a0\'a0\'a0 axis.text.y = element_text(size = 22, face = "bold", lineheight = 1.1),\
\'a0\'a0\'a0 axis.text.x = element_text(size = 22, face = "bold"),\
\'a0\'a0\'a0 axis.title.x = element_text(size = 24, face = "bold"),\
\'a0\'a0\'a0 plot.title = element_text(size = 26, face = "bold")\
\'a0 ) +\
\'a0 xlim(min(tukey_df$lwr) - 0.3, max(tukey_df$upr) + 1)\
\'a0\
# 9. Combine both plots\
final_plot <- (pA + pB) + plot_layout(ncol = 2)\
\'a0\
# 10. Show\
print(final_plot)\
# Load required libraries\
library(dplyr)\
library(ggplot2)\
library(multcompView)\
library(patchwork)\
library(broom)\
\'a0\
# 1. Filter only 'Image trust' rows\
df <- mid2 %>%\
\'a0 filter(!is.na(trust_image))\
\'a0\
# 2. Add condition letters for plot, full names for Overleaf\
df <- df %>%\
\'a0 mutate(\
\'a0\'a0\'a0 condition_letter = recode(condition,\
\'a0\'a0\'a0\'a0\'a0 "color" = "a",\
\'a0\'a0\'a0\'a0\'a0 "no_color" = "b",\
\'a0\'a0\'a0\'a0\'a0 "c2pa" = "c",\
\'a0\'a0\'a0\'a0\'a0 "nolabel" = "d"\
\'a0\'a0\'a0 )\
\'a0 )\
\'a0\
df$condition_letter <- factor(df$condition_letter, levels = c("a", "b", "c", "d"))\
\'a0\
# 3. Compute means and SE\
means_tbl <- df %>%\
\'a0 group_by(condition_letter) %>%\
\'a0 summarise(\
\'a0\'a0\'a0 n = n(),\
\'a0\'a0\'a0 mean_score = mean(trust_image),\
\'a0\'a0\'a0 se_score = sd(trust_image) / sqrt(n),\
\'a0\'a0\'a0 .groups = "drop"\
\'a0 )\
\'a0\
# 4. Run ANOVA\
aov_mod <- aov(trust_image ~ condition_letter, data = df)\
summary(aov_mod)\
\'a0\
# 5. Tukey HSD\
tukey_res <- TukeyHSD(aov_mod, "condition_letter")\
tukey_df <- as.data.frame(tukey_res$condition_letter)\
tukey_df$pair <- rownames(tukey_df)\
\'a0\
# 6. Significance formatting\
tukey_df$p_stars <- cut(as.numeric(tukey_df[["p adj"]]),\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 breaks = c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 labels = c("***", "**", "*", ".", "ns"))\
tukey_df$p_text <- ifelse(\
\'a0 tukey_df[["p adj"]] < 0.001,\
\'a0 "< 0.001",\
\'a0 paste0("= ", formatC(tukey_df[["p adj"]], format = "f", digits = 3))\
)\
tukey_df$p_label <- paste0(tukey_df$p_stars, " (p ", tukey_df$p_text, ")")\
\'a0\
# 7. Plot A \'97 mean image trust bar plot with letters\
pA <- ggplot(means_tbl, aes(x = condition_letter, y = mean_score)) +\
\'a0 geom_col(fill = "#0072B2", width = 0.6) +\
\'a0 geom_errorbar(aes(ymin = mean_score - se_score,\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 ymax = mean_score + se_score), width = 0.2) +\
\'a0 geom_text(aes(label = round(mean_score, 2)),\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 vjust = -1, size = 10, fontface = "bold") +\
\'a0 coord_cartesian(ylim = c(0, max(means_tbl$mean_score + means_tbl$se_score) + 1)) +\
\'a0 labs(\
\'a0\'a0\'a0 title = "A. Mean Image Trust by Condition",\
\'a0\'a0\'a0 x = NULL,\
\'a0\'a0\'a0 y = "Mean Image Trust (1\'967)"\
\'a0 ) +\
\'a0 theme_minimal(base_size = 24) +\
\'a0 theme(\
\'a0\'a0\'a0 axis.text.x = element_text(size = 22, face = "bold"),\
\'a0\'a0\'a0 axis.text.y = element_text(size = 22, face = "bold"),\
\'a0\'a0\'a0 axis.title.y = element_text(size = 24, face = "bold"),\
\'a0\'a0\'a0 plot.title = element_text(size = 26, face = "bold"),\
\'a0\'a0\'a0 legend.position = "none"\
\'a0 )\
\'a0\
# 8. Plot B \'97 Tukey post-hoc\
pB <- ggplot(tukey_df, aes(x = diff, y = reorder(pair, diff))) +\
\'a0 geom_point(size = 5) +\
\'a0 geom_errorbarh(aes(xmin = lwr, xmax = upr), height = 0.3) +\
\'a0 geom_text(aes(label = p_label), nudge_y = -0.3, size = 8, fontface = "bold") +\
\'a0 geom_vline(xintercept = 0, linetype = "dashed") +\
\'a0 labs(\
\'a0\'a0\'a0 title = "B. Tukey HSD Post-Hoc Differences",\
\'a0\'a0\'a0 x = "Difference in Mean Image Trust",\
\'a0\'a0\'a0 y = NULL\
\'a0 ) +\
\'a0 theme_bw(base_size = 24) +\
\'a0 theme(\
\'a0\'a0\'a0 axis.text.y = element_text(size = 22, face = "bold", lineheight = 1.1),\
\'a0\'a0\'a0 axis.text.x = element_text(size = 22, face = "bold"),\
\'a0\'a0\'a0 axis.title.x = element_text(size = 24, face = "bold"),\
\'a0\'a0\'a0 plot.title = element_text(size = 26, face = "bold")\
\'a0 ) +\
\'a0 xlim(min(tukey_df$lwr) - 0.3, max(tukey_df$upr) + 1)\
\'a0\
# 9. Combine both plots\
final_plot <- (pA + pB) + plot_layout(ncol = 2)\
\'a0\
# 10. Show\
print(final_plot)\
library(tidyverse)\
\'a0\
# Filter and relabel conditions\
labeled_df <- post_df %>%\
\'a0 filter(condition %in% c("color", "no_color", "c2pa")) %>%\
\'a0 mutate(condition = recode(condition,\
\'a0\'a0\'a0 "color"\'a0\'a0\'a0 = "Color Image Trust Score",\
\'a0\'a0\'a0 "no_color" = "Black & White Trust Score",\
\'a0\'a0\'a0 "c2pa"\'a0\'a0\'a0\'a0 = "C2PA"\
\'a0 ))\
\'a0\
# Reorder condition factor to set bar order: C2PA, Black & White, Color\
labeled_df$condition <- factor(labeled_df$condition, levels = c(\
\'a0 "C2PA",\
\'a0 "Black & White Trust Score",\
\'a0 "Color Image Trust Score"\
))\
\'a0\
# Define mapping from variable names to label statements\
label_vars <- c(\
\'a0 "understood_label"\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 = "Easy to understand at a glance",\
\'a0 "decision_support"\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 = "Helped decide what to read",\
\'a0 "evaluate_trustworthiness" = "Helped evaluate image trust",\
\'a0 "image_trust"\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 = "Reassures image trust",\
\'a0 "info_usefulness"\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 = "Provides useful information",\
\'a0 "visual_design"\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 = "Visually appealing",\
\'a0 "more_labels"\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 = "Want more labels like this"\
)\
\'a0\
# Reshape and summarize data\
plot_df <- labeled_df %>%\
\'a0 pivot_longer(\
\'a0\'a0\'a0 cols = all_of(names(label_vars)),\
\'a0\'a0\'a0 names_to = "variable", values_to = "Rating"\
\'a0 ) %>%\
\'a0 mutate(Statement = label_vars[variable]) %>%\
\'a0 group_by(condition, Statement) %>%\
\'a0 summarise(\
\'a0\'a0\'a0 mean_rating = mean(Rating, na.rm = TRUE),\
\'a0\'a0\'a0 se = sd(Rating, na.rm = TRUE) / sqrt(sum(!is.na(Rating))),\
\'a0\'a0\'a0 .groups = "drop"\
\'a0 )\
\'a0\
# Reorder again to ensure consistency\
plot_df$condition <- factor(plot_df$condition, levels = c(\
\'a0 "C2PA",\
\'a0 "Black & White Trust Score",\
\'a0 "Color Image Trust Score"\
))\
\'a0\
# Plot\
ggplot(plot_df, aes(x = mean_rating, y = fct_rev(Statement), fill = condition)) +\
\'a0 geom_col(position = position_dodge(width = 0.9), width = 0.8) +\
\'a0 geom_errorbar(\
\'a0\'a0\'a0 aes(xmin = mean_rating - se, xmax = mean_rating + se),\
\'a0\'a0\'a0 width = 0.2,\
\'a0\'a0\'a0 position = position_dodge(width = 0.9)\
\'a0 ) +\
\'a0 geom_text(\
\'a0\'a0\'a0 aes(x = mean_rating + 0.25, label = round(mean_rating, 2)),\'a0 # \uc0\u8592  label position further right\
\'a0\'a0\'a0 position = position_dodge(width = 0.9),\
\'a0\'a0\'a0 hjust = 0,\
\'a0\'a0\'a0 size = 3.2\
\'a0 ) +\
\'a0 scale_fill_manual(\
\'a0\'a0\'a0 values = c(\
\'a0\'a0\'a0\'a0\'a0 "Color Image Trust Score"\'a0\'a0\'a0\'a0\'a0\'a0 = "#619CFF",\'a0 # Blue\
\'a0\'a0\'a0\'a0\'a0 "Black & White Trust Score"\'a0\'a0\'a0\'a0 = "#F8766D",\'a0 # Red\
\'a0\'a0\'a0\'a0\'a0 "C2PA"\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 = "#00BA38"\'a0\'a0 # Green\
\'a0\'a0\'a0 )\
\'a0 ) +\
\'a0 labs(\
\'a0\'a0\'a0 title = "Perceived Usefulness, Trustworthiness, and Appeal of the Labels",\
\'a0\'a0\'a0 x = "Mean Agreement (1 = strongly disagree, 7 = strongly agree)",\
\'a0\'a0\'a0 y = NULL,\
\'a0\'a0\'a0 fill = "Condition"\
\'a0 ) +\
\'a0 coord_cartesian(xlim = c(0, 7)) +\
\'a0 theme_minimal(base_size = 13)\
\
\'a0\
library(ggplot2)\
library(dplyr)\
library(ggpubr)\
\'a0\
# Prepare and rename conditions, set factor levels\
df <- post_df %>%\
\'a0 filter(condition != "nolabel") %>%\
\'a0 mutate(\
\'a0\'a0\'a0 familiar_trust_levels = ifelse(is.na(familiar_trust_levels), "Not sure", familiar_trust_levels),\
\'a0\'a0\'a0 familiar_nutriscore\'a0\'a0 = ifelse(is.na(familiar_nutriscore), "Not sure", familiar_nutriscore),\
\'a0\'a0\'a0 familiar_trust_levels = factor(familiar_trust_levels, levels = c("Yes", "No", "Not sure")),\
\'a0\'a0\'a0 familiar_nutriscore\'a0\'a0 = factor(familiar_nutriscore, levels = c("Yes", "No", "Not sure")),\
\'a0\'a0\'a0 condition = recode(condition,\
\'a0\'a0\'a0\'a0\'a0 c2pa\'a0\'a0\'a0\'a0 = "C2PA",\
\'a0\'a0\'a0\'a0\'a0 color\'a0\'a0\'a0 = "Color Image Trust Score",\
\'a0\'a0\'a0\'a0\'a0 no_color = "Black and White Image Trust Score"\
\'a0\'a0\'a0 )\
\'a0 )\
\'a0\
# Function to add large bold mean labels\
mean_labels <- function(...) \{\
\'a0 stat_summary(\
\'a0\'a0\'a0 fun = mean,\
\'a0\'a0\'a0 geom = "text",\
\'a0\'a0\'a0 aes(label = round(..y.., 2)),\
\'a0\'a0\'a0 position = position_dodge(width = 0.75),\
\'a0\'a0\'a0 vjust = -1.2,\
\'a0\'a0\'a0 size = 8,\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 # big text\
\'a0\'a0\'a0 fontface = "bold"\'a0\'a0\'a0\'a0\'a0 # bold\
\'a0 )\
\}\
\'a0\
# Define manual colors\
colors_manual <- c(\
\'a0 "Black and White Image Trust Score" = "tomato",\
\'a0 "Color Image Trust Score"\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 = "forestgreen",\
\'a0 "C2PA"\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 = "dodgerblue3"\
)\
\'a0\
# Theme settings\
custom_theme <- theme_minimal(base_size = 22) +\
\'a0 theme(\
\'a0\'a0\'a0 plot.title\'a0\'a0\'a0\'a0\'a0 = element_text(size = 26, face = "bold", hjust = 0.5),\
\'a0\'a0\'a0 axis.title.x\'a0\'a0\'a0 = element_text(size = 22, face = "bold"),\
\'a0\'a0\'a0 axis.title.y\'a0\'a0\'a0 = element_text(size = 22, face = "bold"),\
\'a0\'a0\'a0 axis.text.x\'a0\'a0\'a0\'a0 = element_text(size = 20, face = "bold"),\
\'a0\'a0\'a0 axis.text.y\'a0\'a0\'a0\'a0 = element_text(size = 20, face = "bold"),\
\'a0\'a0\'a0 legend.title\'a0\'a0\'a0 = element_blank(),\
\'a0\'a0\'a0 legend.position = "top",\
\'a0\'a0\'a0 legend.text\'a0\'a0\'a0\'a0 = element_text(size = 20, face = "bold")\
\'a0 )\
\'a0\
# Plot A\
plot_a <- ggplot(df, aes(x = familiar_trust_levels, y = understood_label, fill = condition)) +\
\'a0 geom_boxplot(alpha = 0.9, outlier.shape = NA, position = position_dodge(width = 0.75), color = "black", size = 1) +\
\'a0 geom_jitter(aes(color = condition), alpha = 0.5, size = 3,\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 position = position_jitterdodge(jitter.width = 0.2, dodge.width = 0.75),\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 show.legend = FALSE) +\
\'a0 mean_labels() +\
\'a0 scale_fill_manual(values = colors_manual) +\
\'a0 scale_color_manual(values = colors_manual) +\
\'a0 scale_x_discrete(labels = c("Yes" = "Yes", "No" = "No", "Not sure" = "Not sure")) +\
\'a0 labs(\
\'a0\'a0\'a0 x = "Are you familiar with trust levels on social media (e.g., verification badges)?",\
\'a0\'a0\'a0 y = "Self-reported Understanding (1\'967)",\
\'a0\'a0\'a0 title = "A. Understanding by Prior Trust Labels Familiarity"\
\'a0 ) +\
\'a0 custom_theme\
\'a0\
# Plot B (exclude C2PA)\
plot_b <- df %>%\
\'a0 filter(condition != "C2PA") %>%\
\'a0 ggplot(aes(x = familiar_nutriscore, y = understood_label, fill = condition)) +\
\'a0 geom_boxplot(alpha = 0.9, outlier.shape = NA, position = position_dodge(width = 0.75), color = "black", size = 1) +\
\'a0 geom_jitter(aes(color = condition), alpha = 0.5, size = 3,\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 position = position_jitterdodge(jitter.width = 0.2, dodge.width = 0.75),\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 show.legend = FALSE) +\
\'a0 mean_labels() +\
\'a0 scale_fill_manual(values = colors_manual) +\
\'a0 scale_color_manual(values = colors_manual) +\
\'a0 labs(\
\'a0\'a0\'a0 x = "Are you familiar with the Nutri-Score front-of-pack food label?",\
\'a0\'a0\'a0 y = "Self-reported Understanding (1\'967)",\
\'a0\'a0\'a0 title = "B. Understanding by Prior Nutri-Score Familiarity"\
\'a0 ) +\
\'a0 custom_theme\
\'a0\
# Combine plots\
ggarrange(plot_a, plot_b, ncol = 2, labels = c("A", "B"), align = "hv")\
library(dplyr)\
library(ggplot2)\
\'a0\
# Compute % of article\uc0\u8208 view events where participants clicked \'93?\'94\
round_summary <- mid2 %>%\
\'a0 filter(condition != "nolabel") %>%\'a0\'a0 # drop the nolabel condition if present\
\'a0 group_by(condition) %>%\
\'a0 summarise(\
\'a0\'a0\'a0 views\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 = n(),\
\'a0\'a0\'a0 expands\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 = sum(label_explained, na.rm = TRUE),\
\'a0\'a0\'a0 pct_expand_views = expands / views * 100,\
\'a0\'a0\'a0 .groups = "drop"\
\'a0 )\
\'a0\
# Plot\
ggplot(round_summary, aes(x = condition, y = pct_expand_views, fill = condition)) +\
\'a0 geom_col(show.legend = FALSE, width = 0.6) +\'a0\
\'a0 geom_text(aes(label = sprintf("%.1f%%", pct_expand_views)),\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 vjust = -0.5, size = 4, fontface = "bold") +\
\'a0 scale_y_continuous(\
\'a0\'a0\'a0 limits = c(0, 100),\
\'a0\'a0\'a0 expand = expansion(mult = c(0, 0.05))\
\'a0 ) +\
\'a0 labs(\
\'a0\'a0\'a0 title\'a0\'a0\'a0 = "Label Explanation Clicks per Article View",\
\'a0\'a0\'a0 subtitle = "% of article view events where participants clicked \'93?\'94",\
\'a0\'a0\'a0 x\'a0\'a0\'a0\'a0\'a0\'a0\'a0 = "Condition",\
\'a0\'a0\'a0 y\'a0\'a0\'a0\'a0\'a0\'a0\'a0 = "% Expand Clicks"\
\'a0 ) +\
\'a0 theme_minimal(base_size = 14) +\
\'a0 theme(\
\'a0\'a0\'a0 plot.title\'a0\'a0\'a0 = element_text(face = "bold", hjust = 0.5),\
\'a0\'a0\'a0 plot.subtitle = element_text(hjust = 0.5)\
\'a0 )\
How Often Do Participants Consume News?\
# 1) Prepare the data: compute percentages and order levels by frequency\
> df_plot <- pre_df %>%\
+\'a0\'a0\'a0\'a0 count(news_frequency) %>%\
+\'a0\'a0\'a0\'a0 mutate(pct = n / sum(n)) %>%\
+\'a0\'a0\'a0\'a0 # specify a custom order if desired, here by descending pct\
+\'a0\'a0\'a0\'a0 arrange(desc(pct)) %>%\
+\'a0\'a0\'a0\'a0 mutate(news_frequency = fct_reorder(news_frequency, pct))\
>\
> # 2) Make the plot\
> p <- ggplot(df_plot, aes(x = news_frequency, y = pct)) +\
+\'a0\'a0\'a0\'a0 geom_col(fill = "#fb6a4a", color = "black", linewidth = 1.2) +\
+\'a0\'a0\'a0\'a0 scale_y_continuous(labels = percent_format(accuracy = 1),\
+\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 expand = expansion(mult = c(0, .05))) +\
+\'a0\'a0\'a0\'a0 labs(\
+\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 title\'a0\'a0\'a0 = "How Often Do Participants Consume News?",\
+\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 x\'a0\'a0\'a0\'a0\'a0\'a0\'a0 = "News Consumption Frequency",\
+\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 y\'a0\'a0\'a0\'a0\'a0\'a0\'a0 = "Percentage of Participants"\
+\'a0\'a0\'a0\'a0 ) +\
+\'a0\'a0\'a0\'a0 theme_minimal(base_size = 20) +\
+\'a0\'a0\'a0\'a0 theme(\
+\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 plot.title\'a0\'a0 = element_text(face = "bold", size = 24, hjust = .5),\
+\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 axis.title\'a0\'a0 = element_text(face = "bold", size = 20),\
+\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 axis.text\'a0\'a0\'a0 = element_text(size = 16),\
+\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 axis.text.x\'a0 = element_text(angle = 30, hjust = 1, face = "bold")\
+\'a0\'a0\'a0\'a0 )\
>\
> # 3) Preview\
> print(p)\
>\
> # 4) Save high-res PNG\
> ggsave(\
+\'a0\'a0\'a0\'a0 filename = "pre_plots/news_frequency_percent.png",\
+\'a0\'a0\'a0\'a0 plot\'a0\'a0\'a0\'a0 = p,\
+\'a0\'a0\'a0\'a0 width\'a0\'a0\'a0 = 10,\
+\'a0\'a0\'a0\'a0 height\'a0\'a0 = 6,\
+\'a0\'a0\'a0\'a0 dpi\'a0\'a0\'a0\'a0\'a0 = 600\
+ )\
Which Devices Do Participants Use?\
> # Load necessary packages\
> library(dplyr)\
> library(tidyr)\
> library(ggplot2)\
> library(forcats)\
> library(scales)\
>\
> # Prepare the data: split multi\uc0\u8208 select, count and compute percentages\
> df_devices <- pre_df %>%\
+\'a0\'a0\'a0\'a0 separate_rows(devices, sep = ";") %>%\'a0\'a0\'a0\'a0\'a0\'a0 # split entries like "Mobile;Computer"\
+\'a0\'a0\'a0\'a0 count(devices) %>%\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 # get counts per device\
+\'a0\'a0\'a0\'a0 mutate(pct = n / sum(n)) %>%\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 # convert to percentage\
+\'a0\'a0\'a0\'a0 arrange(pct) %>%\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 # sort for nicer ordering\
+\'a0\'a0\'a0\'a0 mutate(devices = fct_reorder(devices, pct)) # reorder factor levels\
>\
> # Build the plot\
> p_devices <- ggplot(df_devices, aes(x = devices, y = pct)) +\
+\'a0\'a0\'a0\'a0 geom_col(fill = "#2b8cbe", color = "black", linewidth = 1.2) +\
+\'a0\'a0\'a0\'a0 scale_y_continuous(labels = percent_format(accuracy = 1),\
+\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 expand = expansion(mult = c(0, .05))) +\
+\'a0\'a0\'a0\'a0 labs(\
+\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 title = "Which Devices Do Participants Use?",\
+\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 x\'a0\'a0\'a0\'a0 = "Device Type",\
+\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 y\'a0\'a0\'a0\'a0 = "Percentage of Participants"\
+\'a0\'a0\'a0\'a0 ) +\
+\'a0\'a0\'a0\'a0 theme_minimal(base_size = 18) +\
+\'a0\'a0\'a0\'a0 theme(\
+\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 plot.title\'a0\'a0 = element_text(face = "bold", size = 20, hjust = .5),\
+\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 axis.title\'a0\'a0 = element_text(face = "bold", size = 16),\
+\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 axis.text\'a0\'a0\'a0 = element_text(size = 14),\
+\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 axis.text.x\'a0 = element_text(angle = 25, hjust = 1)\
+\'a0\'a0\'a0\'a0 )\
>\
> # Display the plot in the RStudio Plots pane\
> print(p_devices)\
library(dplyr)\
library(tidyr)\
library(purrr)\
\'a0\
# 1) Turn your multi\uc0\u8208 select \'93devices\'94 into one row per device per participant\
dev_long <- pre_df %>%\
\'a0 separate_rows(devices, sep = ";") %>%\
\'a0 mutate(devices = factor(devices))\
\'a0\
# 2) Make a binary wide table: one column per device with TRUE/FALSE\
dev_wide <- dev_long %>%\
\'a0 mutate(value = TRUE) %>%\
\'a0 pivot_wider(\
\'a0\'a0\'a0 id_cols = id,\
\'a0\'a0\'a0 names_from = devices,\
\'a0\'a0\'a0 values_from = value,\
\'a0\'a0\'a0 values_fill = FALSE\
\'a0 ) %>%\
\'a0 left_join(select(pre_df, id, news_frequency), by = "id")\
\'a0\
# 3) Define a function to run chi\uc0\u8208 square for one device\
test_device <- function(dev_col) \{\
\'a0 tbl <- table(dev_wide[[dev_col]], dev_wide$news_frequency)\
\'a0 test <- chisq.test(tbl)\
\'a0 tibble(\
\'a0\'a0\'a0 device\'a0\'a0\'a0\'a0 = dev_col,\
\'a0\'a0\'a0 chisq\'a0\'a0\'a0\'a0\'a0 = unname(test$statistic),\
\'a0\'a0\'a0 df\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 = unname(test$parameter),\
\'a0\'a0\'a0 p_value\'a0\'a0\'a0 = test$p.value,\
\'a0\'a0\'a0 warning\'a0\'a0\'a0 = if_else(any(test$expected < 5), "Low expected counts", "")\
\'a0 )\
\}\
\'a0\
# 4) Apply to all device columns\
results <- map_df(\
\'a0 .x = names(dev_wide)[names(dev_wide) != "id" & names(dev_wide) != "news_frequency"],\
\'a0 .f = test_device\
)\
\'a0\
print(results)\
On Which Platforms Do Participants Read News?\
# Load necessary packages\
library(dplyr)\
library(ggplot2)\
library(forcats)\
library(scales)\
\'a0\
# Prepare the data: count and compute percentages\
df_platform <- pre_df %>%\
\'a0 count(platform) %>%\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 # count per platform\
\'a0 mutate(pct = n / sum(n)) %>%\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 # convert to percentage\
\'a0 arrange(pct) %>%\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 # sort for nicer ordering\
\'a0 mutate(platform = fct_reorder(platform, pct))\'a0 # reorder factor levels\
\'a0\
# Build the plot\
p_platform <- ggplot(df_platform, aes(x = platform, y = pct)) +\
\'a0 geom_col(fill = "#7bccc4", color = "black", linewidth = 1.2) +\
\'a0 scale_y_continuous(labels = percent_format(accuracy = 1),\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 expand = expansion(mult = c(0, .05))) +\
\'a0 labs(\
\'a0\'a0\'a0 title = "On Which Platforms Do Participants Read News?",\
\'a0\'a0\'a0 x\'a0\'a0\'a0\'a0 = "Platform",\
\'a0\'a0\'a0 y\'a0\'a0\'a0\'a0 = "Percentage of Participants"\
\'a0 ) +\
\'a0 theme_minimal(base_size = 18) +\
\'a0 theme(\
\'a0\'a0\'a0 plot.title\'a0\'a0 = element_text(face = "bold", size = 20, hjust = 0.5),\
\'a0\'a0\'a0 axis.title\'a0\'a0 = element_text(face = "bold", size = 16),\
\'a0\'a0\'a0 axis.text\'a0\'a0\'a0 = element_text(size = 14),\
\'a0\'a0\'a0 axis.text.x\'a0 = element_text(angle = 25, hjust = 1)\
\'a0 )\
\'a0\
# Display the plot\
print(p_platform)\
ANOVAs of\'a0
\f2\b trust_level
\f0\b0 \'a0by each of those three factors. We\'92ll:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0
\f2\b \cf0 \kerning1\expnd0\expndtw0 {\listtext	1	}\expnd0\expndtw0\kerning0
Platform
\f0\b0 \'a0(single\uc0\u8208 choice, straightforward)
\f2\b \
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	2	}\expnd0\expndtw0\kerning0
Devices
\f0\b0 \'a0(multi\uc0\u8208 select): we \'93explode\'94 into one row per device\'d7participant
\f2\b \
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	3	}\expnd0\expndtw0\kerning0
News sources
\f0\b0 \'a0(multi\uc0\u8208 select): same trick
\f2\b \
\pard\pardeftab720\li720\fi-720\partightenfactor0

\f0\b0 \cf0 # 1) Load packages\
library(dplyr)\
library(tidyr)\
\'a0\
# 2) ANOVA by platform\
aov_plat <- aov(trust_level ~ platform, data = pre_df)\
cat("=== ANOVA: trust_level ~ platform ===\\n")\
print(summary(aov_plat))\
cat("\\nTukey post\uc0\u8208 hoc for platform:\\n")\
print(TukeyHSD(aov_plat))\
\'a0\
\'a0\
# 3) ANOVA by devices (explode multi\uc0\u8208 select)\
dev_long <- pre_df %>%\
\'a0 separate_rows(devices, sep = ";")\
aov_dev <- aov(trust_level ~ devices, data = dev_long)\
cat("\\n=== ANOVA: trust_level ~ devices ===\\n")\
print(summary(aov_dev))\
cat("\\nTukey post\uc0\u8208 hoc for devices:\\n")\
print(TukeyHSD(aov_dev))\
\'a0\
\'a0\
# 4) ANOVA by news_sources (explode multi\uc0\u8208 select)\
src_long <- pre_df %>%\
\'a0 separate_rows(news_sources, sep = ";")\
aov_src <- aov(trust_level ~ news_sources, data = src_long)\
cat("\\n=== ANOVA: trust_level ~ news_sources ===\\n")\
print(summary(aov_src))\
cat("\\nTukey post\uc0\u8208 hoc for news_sources:\\n")\
print(TukeyHSD(aov_src))\
\'a0\
\'a0\
p2 <- ggplot(pre_df, aes(platform, trust_level)) +\
\'a0 geom_boxplot(outlier.shape = NA, fill = "#AFCDE7", color = "black") +\
\'a0 geom_jitter(width = 0.2, alpha = 0.4) +\
\'a0 # stat_compare_means(method = "anova", label = "p.format", label.y = 9.8, size = 4) +\
\'a0 stat_pvalue_manual(\
\'a0\'a0\'a0 tuk,\
\'a0\'a0\'a0 label = "label",\
\'a0\'a0\'a0 mapping = aes(x = group1, xend = group2, y.position = y.position),\
\'a0\'a0\'a0 bracket.size = 0.5\
\'a0 ) +\
\'a0 labs(\
\'a0\'a0\'a0 title = "Trust Level by News Platform",\
\'a0\'a0\'a0 x\'a0\'a0\'a0\'a0 = "News Platform",\
\'a0\'a0\'a0 y\'a0\'a0\'a0\'a0 = "Trust Level"\
\'a0 ) +\
\'a0 theme_minimal(base_size = 14) +\
\'a0 theme(plot.title = element_text(face = "bold", hjust = .5))\
\'a0\
print(p2)\
\pard\pardeftab720\partightenfactor0
\cf0 Which News Sources Do Participants Use?\
# Descriptive bar chart for news_sources\
\'a0\
# 1. Load required packages\
library(dplyr)\
library(tidyr)\
library(ggplot2)\
library(forcats)\
library(scales)\
\'a0\
# 2. Prepare the data\
df_sources <- pre_df %>%\
\'a0 separate_rows(news_sources, sep = ";") %>%\'a0\'a0 # split multi\uc0\u8208 select entries\
\'a0 count(news_sources) %>%\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 # count occurrences\
\'a0 mutate(pct = n / sum(n)) %>%\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 # convert to percentage\
\'a0 arrange(pct) %>%\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 # sort for nicer ordering\
\'a0 mutate(news_sources = fct_reorder(news_sources, pct))\'a0 # reorder factor levels\
\'a0\
# 3. Build the plot\
p_sources <- ggplot(df_sources, aes(x = news_sources, y = pct)) +\
\'a0 geom_col(fill = "#fec44f", color = "black", linewidth = 1.2) +\
\'a0 scale_y_continuous(\
\'a0\'a0\'a0 labels = percent_format(accuracy = 1),\
\'a0\'a0\'a0 expand = expansion(mult = c(0, .05))\
\'a0 ) +\
\'a0 labs(\
\'a0\'a0\'a0 title = "Which News Sources Do Participants Use?",\
\'a0\'a0\'a0 x\'a0\'a0\'a0\'a0 = "News Source",\
\'a0\'a0\'a0 y\'a0\'a0\'a0\'a0 = "Percentage of Participants"\
\'a0 ) +\
\'a0 theme_minimal(base_size = 18) +\
\'a0 theme(\
\'a0\'a0\'a0 plot.title\'a0\'a0 = element_text(face = "bold", size = 20, hjust = 0.5),\
\'a0\'a0\'a0 axis.title\'a0\'a0 = element_text(face = "bold", size = 16),\
\'a0\'a0\'a0 axis.text\'a0\'a0\'a0 = element_text(size = 14),\
\'a0\'a0\'a0 axis.text.x\'a0 = element_text(angle = 25, hjust = 1)\
\'a0 )\
\'a0\
# 4. Display the plot\
print(p_sources)\
hich Label Elements Drove Article Choice?\
library(dplyr)\
library(tidyr)\
library(ggplot2)\
library(forcats)\
library(scales)\
library(stringr)\
\'a0\
# 1. Exclude the 'nolabel' condition\
mid_filt <- mid_df %>%\
\'a0 filter(condition != "nolabel")\
\'a0\
# 2. Split multi-select and drop any \'93Other:\'94 responses\
mid_long <- mid_filt %>%\
\'a0 separate_rows(selected_elements, sep = ";") %>%\
\'a0 mutate(selected_elements = str_trim(selected_elements)) %>%\
\'a0 filter(!str_starts(selected_elements, "Other:"))\
\'a0\
# 3. Count and compute percentages\
desc_el <- mid_long %>%\
\'a0 count(selected_elements) %>%\
\'a0 mutate(percent = n / sum(n) * 100) %>%\
\'a0 arrange(desc(percent))\
\'a0\
print(desc_el)\
# A tibble: \'85 \'d7 3\
#\'a0\'a0 selected_elements\'a0\'a0\'a0\'a0\'a0\'a0 n percent\
#\'a0\'a0 <chr>\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 <int>\'a0\'a0 <dbl>\
# 1 Headline\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 120\'a0\'a0\'a0 43.0\
# 2 Topic\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 92\'a0\'a0\'a0 33.1\
# 3 Picture\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 38\'a0\'a0\'a0 13.6\
# 4 Image label\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 25\'a0\'a0\'a0\'a0 9.0\
# 5 Don't know/None of these 4\'a0\'a0\'a0 1.4\
\'a0\
# 4. Plot the filtered percentages\
ggplot(desc_el, aes(x = fct_reorder(selected_elements, percent), y = percent)) +\
\'a0 geom_col(fill = "#8da0cb", color = "black") +\
\'a0 geom_text(aes(label = paste0(round(percent, 1), "%")),\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 hjust = -0.1, size = 4) +\
\'a0 coord_flip() +\
\'a0 scale_y_continuous(expand = expansion(mult = c(0, .1))) +\
\'a0 labs(\
\'a0\'a0\'a0 title = "Which Label Elements Drove Article Choice?",\
\'a0\'a0\'a0 x\'a0\'a0\'a0\'a0 = "Label Element",\
\'a0\'a0\'a0 y\'a0\'a0\'a0\'a0 = "Percent of Selections"\
\'a0 ) +\
\'a0 theme_minimal(base_size = 14) +\
\'a0 theme(\
\'a0\'a0\'a0 plot.title = element_text(face = "bold", hjust = 0.5),\
\'a0\'a0\'a0 axis.title = element_text(face = "bold"),\
\'a0\'a0\'a0 axis.text\'a0 = element_text(size = 12)\
\'a0 )\
# 1. Load packages (install if missing)\
if (!requireNamespace("emmeans", quietly = TRUE)) install.packages("emmeans")\
library(dplyr)\
library(stringr)\
library(emmeans)\
library(ggplot2)\
\'a0\
# 2. Prepare the data\
mid_label <- mid_df %>%\
\'a0 filter(condition != "nolabel") %>%\
\'a0 mutate(\
\'a0\'a0\'a0 used_label = if_else(str_detect(selected_elements, "{\field{\*\fldinst{HYPERLINK "file:///bImage%20label/b"}}{\fldrslt \cf3 \ul \ulc3 \\\\bImage label\\\\b}}"), 1, 0)\
\'a0 )\
\'a0\
# 3. Fit the one\uc0\u8208 way ANOVA\
aov_label <- aov(used_label ~ condition, data = mid_label)\
\'a0\
# 4. Get emmeans and do Tukey with CIs\
emm <- emmeans(aov_label, ~ condition)\
# summary(..., infer=c(TRUE,TRUE)) gives estimate, SE, df, t.ratio, p.value, plus lower.CL/upper.CL\
tuk <- summary(pairs(emm, adjust = "tukey"), infer = c(TRUE, TRUE))\
\'a0\
# 5. Turn into a data frame and rename correctly\
tuk_df <- as.data.frame(tuk) %>%\
\'a0 rename(\
\'a0\'a0\'a0 Comparison = contrast,\
\'a0\'a0\'a0 Difference = estimate,\
\'a0\'a0\'a0 SE\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 = SE,\
\'a0\'a0\'a0 df\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 = df,\
\'a0\'a0\'a0 p_value\'a0\'a0\'a0 = p.value,\
\'a0\'a0\'a0 lower_CL\'a0\'a0 = lower.CL,\
\'a0\'a0\'a0 upper_CL\'a0\'a0 = upper.CL\
\'a0 ) %>%\
\'a0 # order for plotting\
\'a0 arrange(Difference) %>%\
\'a0 mutate(\
\'a0\'a0\'a0 Comparison = factor(Comparison, levels = Comparison),\
\'a0\'a0\'a0 signif\'a0\'a0\'a0\'a0 = case_when(\
\'a0\'a0\'a0\'a0\'a0 p_value < 0.001 ~ "***",\
\'a0\'a0\'a0\'a0\'a0 p_value < 0.01\'a0 ~ "**",\
\'a0\'a0\'a0\'a0\'a0 p_value < 0.05\'a0 ~ "*",\
\'a0\'a0\'a0\'a0\'a0 TRUE\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 ~ ""\
\'a0\'a0\'a0 )\
\'a0 )\
\'a0\
# 6. Plot\
ggplot(tuk_df, aes(x = Comparison, y = Difference)) +\
\'a0 geom_hline(yintercept = 0, linetype = "dashed", color = "gray70") +\
\'a0 geom_errorbar(aes(ymin = lower_CL, ymax = upper_CL), width = 0.2) +\
\'a0 geom_point(size = 3, color = "steelblue") +\
\'a0 geom_text(aes(label = signif),\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 nudge_y = ifelse(tuk_df$Difference > 0, 0.02, -0.02),\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 size = 5) +\
\'a0 coord_flip() +\
\'a0 labs(\
\'a0\'a0\'a0 title = "Tukey HSD: Image\uc0\u8208 Label Usage by Condition",\
\'a0\'a0\'a0 x\'a0\'a0\'a0\'a0 = "Comparison",\
\'a0\'a0\'a0 y\'a0\'a0\'a0\'a0 = "Difference in Proportion Selecting Label"\
\'a0 ) +\
\'a0 theme_minimal(base_size = 14) +\
\'a0 theme(\
\'a0\'a0\'a0 plot.title = element_text(face = "bold", hjust = 0.5),\
\'a0\'a0\'a0 axis.title = element_text(face = "bold")\
\'a0 )\
\'a0\
# 1. Load packages (install if missing)\
if (!requireNamespace("emmeans", quietly = TRUE)) install.packages("emmeans")\
library(dplyr)\
library(stringr)\
library(emmeans)\
library(ggplot2)\
\'a0\
# 2. Prepare the data\
mid_label <- mid_df %>%\
\'a0 filter(condition != "nolabel") %>%\
\'a0 mutate(\
\'a0\'a0\'a0 used_label = if_else(str_detect(selected_elements, "{\field{\*\fldinst{HYPERLINK "file:///bImage%20label/b"}}{\fldrslt \cf3 \ul \ulc3 \\\\bImage label\\\\b}}"), 1, 0)\
\'a0 )\
\'a0\
# 3. Fit the one\uc0\u8208 way ANOVA\
aov_label <- aov(used_label ~ condition, data = mid_label)\
\'a0\
# 4. Get emmeans and do Tukey with CIs\
emm <- emmeans(aov_label, ~ condition)\
# summary(..., infer=c(TRUE,TRUE)) gives estimate, SE, df, t.ratio, p.value, plus lower.CL/upper.CL\
tuk <- summary(pairs(emm, adjust = "tukey"), infer = c(TRUE, TRUE))\
\'a0\
# 5. Turn into a data frame and rename correctly\
tuk_df <- as.data.frame(tuk) %>%\
\'a0 rename(\
\'a0\'a0\'a0 Comparison = contrast,\
\'a0\'a0\'a0 Difference = estimate,\
\'a0\'a0\'a0 SE\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 = SE,\
\'a0\'a0\'a0 df\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 = df,\
\'a0\'a0\'a0 p_value\'a0\'a0\'a0 = p.value,\
\'a0\'a0\'a0 lower_CL\'a0\'a0 = lower.CL,\
\'a0\'a0\'a0 upper_CL\'a0\'a0 = upper.CL\
\'a0 ) %>%\
\'a0 # order for plotting\
\'a0 arrange(Difference) %>%\
\'a0 mutate(\
\'a0\'a0\'a0 Comparison = factor(Comparison, levels = Comparison),\
\'a0\'a0\'a0 signif\'a0\'a0\'a0\'a0 = case_when(\
\'a0\'a0\'a0\'a0\'a0 p_value < 0.001 ~ "***",\
\'a0\'a0\'a0\'a0\'a0 p_value < 0.01\'a0 ~ "**",\
\'a0\'a0\'a0\'a0\'a0 p_value < 0.05\'a0 ~ "*",\
\'a0\'a0\'a0\'a0\'a0 TRUE\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 ~ ""\
\'a0\'a0\'a0 )\
\'a0 )\
\'a0\
# 6. Plot\
ggplot(tuk_df, aes(x = Comparison, y = Difference)) +\
\'a0 geom_hline(yintercept = 0, linetype = "dashed", color = "gray70") +\
\'a0 geom_errorbar(aes(ymin = lower_CL, ymax = upper_CL), width = 0.2) +\
\'a0 geom_point(size = 3, color = "steelblue") +\
\'a0 geom_text(aes(label = signif),\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 nudge_y = ifelse(tuk_df$Difference > 0, 0.02, -0.02),\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 size = 5) +\
\'a0 coord_flip() +\
\'a0 labs(\
\'a0\'a0\'a0 title = "Tukey HSD: Image\uc0\u8208 Label Usage by Condition",\
\'a0\'a0\'a0 x\'a0\'a0\'a0\'a0 = "Comparison",\
\'a0\'a0\'a0 y\'a0\'a0\'a0\'a0 = "Difference in Proportion Selecting Label"\
\'a0 ) +\
\'a0 theme_minimal(base_size = 14) +\
\'a0 theme(\
\'a0\'a0\'a0 plot.title = element_text(face = "bold", hjust = 0.5),\
\'a0\'a0\'a0 axis.title = element_text(face = "bold")\
\'a0 )\
A) Simple one\uc0\u8208 way ANOVA + Tukey\
# install/load\
if (!requireNamespace("dplyr", quietly=TRUE)) install.packages("dplyr")\
library(dplyr)\
\'a0\
# prepare data, drop 'nolabel'\
mid2 <- mid_df %>%\
\'a0 filter(condition != "nolabel") %>%\
\'a0 mutate(condition = factor(condition, levels = c("no_color","color","c2pa")))\
\'a0\
# function to run ANOVA+Tukey and print results\
run_aov_tukey <- function(var) \{\
\'a0 cat("\\n--- ANOVA for", var, "---\\n")\
\'a0 aov_fit <- aov(reformulate("condition", response = var), data = mid2)\
\'a0 print(summary(aov_fit))\
\'a0 cat("\\nTukey pairwise:\\n")\
\'a0 print(TukeyHSD(aov_fit, "condition"))\
\}\
\'a0\
# 1) Article trust\
run_aov_tukey("trust_article")\
\'a0\
# 2) Image trust\
run_aov_tukey("trust_image")\
\'a0\
\'a0\
# install/load\
if (!requireNamespace("ggpubr", quietly=TRUE)) install.packages("ggpubr")\
library(ggplot2)\
library(ggpubr)\
\'a0\
plot_trust_by_cond <- function(var, ylab) \{\
\'a0 ggplot(mid2, aes(x = condition, y = .data[[var]])) +\
\'a0\'a0\'a0 geom_boxplot(outlier.shape = NA, fill = "#AFCDE7", color = "black") +\
\'a0\'a0\'a0 geom_jitter(width = .2, alpha = .4, size = 1.5) +\
\'a0\'a0\'a0 stat_compare_means(method = "anova", label = "p.format", label.y = max(mid2[[var]], na.rm=TRUE) + 0.5) +\
\'a0\'a0\'a0 stat_compare_means(\
\'a0\'a0\'a0\'a0\'a0 method = "t.test",\
\'a0\'a0\'a0\'a0\'a0 comparisons = list(\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 c("no_color","color"),\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 c("no_color","c2pa"),\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 c("color","c2pa")\
\'a0\'a0\'a0\'a0\'a0 ),\
\'a0\'a0\'a0\'a0\'a0 label = "p.signif", hide.ns = TRUE\
\'a0\'a0\'a0 ) +\
\'a0\'a0\'a0 labs(x = "Condition", y = ylab) +\
\'a0\'a0\'a0 theme_minimal(base_size = 14)\
\}\
\'a0\
p1 <- plot_trust_by_cond("trust_article", "Trust in Article")\
p2 <- plot_trust_by_cond("trust_image",\'a0\'a0 "Trust in Image")\
\'a0\
# display side by side\
library(patchwork)\
p1 + p2 + plot_layout(guides="collect")\
#\'97 Improved Fig 3 appearance \'97#\
\'a0\
library(dplyr)\
library(tidyr)\
library(stringr)\
library(ggplot2)\
library(forcats)\
library(patchwork)\
\'a0\
# 1) Build long 0/1 table for `score_meaning` --------------------------------\
usage_long <- post_df %>%\
\'a0 filter(condition != "nolabel") %>%\
\'a0 mutate(row_id = row_number()) %>%\
\'a0 separate_rows(score_meaning, sep = ";") %>%\
\'a0 mutate(\
\'a0\'a0\'a0 score_meaning = str_trim(score_meaning),\
\'a0\'a0\'a0 keep = !str_starts(score_meaning, "Other") & score_meaning != "Not sure",\
\'a0\'a0\'a0 usage = if_else(keep, 1, NA_real_)\
\'a0 ) %>%\
\'a0 filter(keep) %>%\
\'a0 select(row_id, score_meaning, usage) %>%\
\'a0 complete(row_id, score_meaning, fill = list(usage = 0))\
\'a0\
# 2) Panel A: mean usage per option -----------------------------------------\
df_means <- usage_long %>%\
\'a0 group_by(score_meaning) %>%\
\'a0 summarise(mean_usage = mean(usage), .groups = "drop") %>%\
\'a0 # wrap labels at ~25 characters\
\'a0 mutate(label_wrapped = str_wrap(score_meaning, width = 25))\
\'a0\
pA <- ggplot(df_means, aes(x = mean_usage, y = fct_reorder(label_wrapped, mean_usage))) +\
\'a0 geom_col(fill = "#4C78A8", width = 0.6) +\
\'a0 geom_text(aes(label = scales::percent(mean_usage, accuracy=1)),\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 hjust = -0.05, size = 4) +\
\'a0 scale_x_continuous(\
\'a0\'a0\'a0 labels = scales::percent_format(1),\
\'a0\'a0\'a0 expand = expansion(mult = c(0, 0.15))\
\'a0 ) +\
\'a0 labs(\
\'a0\'a0\'a0 title = "A. Mean Reported Label Interpretation",\
\'a0\'a0\'a0 x\'a0\'a0\'a0\'a0 = "Mean Selection Rate",\
\'a0\'a0\'a0 y\'a0\'a0\'a0\'a0 = NULL\
\'a0 ) +\
\'a0 theme_minimal(base_size = 14) +\
\'a0 theme(\
\'a0\'a0\'a0 plot.title\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 = element_text(face = "bold", size = 16),\
\'a0\'a0\'a0 axis.text.y\'a0\'a0\'a0\'a0\'a0\'a0\'a0 = element_text(size = 12),\
\'a0\'a0\'a0 axis.text.x\'a0\'a0\'a0\'a0\'a0\'a0\'a0 = element_text(size = 12),\
\'a0\'a0\'a0 axis.title.x\'a0\'a0\'a0\'a0\'a0\'a0 = element_text(face = "bold", size = 14),\
\'a0\'a0\'a0 panel.grid.major.y = element_blank(),\
\'a0\'a0\'a0 plot.margin\'a0\'a0\'a0\'a0\'a0\'a0\'a0 = margin(10, 10, 10, 10)\
\'a0 )\
\'a0\
# 3) Panel B: Tukey HSD differences -----------------------------------------\
aov_fit <- aov(usage ~ score_meaning, data = usage_long)\
tuk <- TukeyHSD(aov_fit, "score_meaning")$score_meaning %>%\
\'a0 as.data.frame() %>%\
\'a0 rownames_to_column("comparison") %>%\
\'a0 rename(\
\'a0\'a0\'a0 Difference = diff,\
\'a0\'a0\'a0 lower_CL\'a0\'a0 = lwr,\
\'a0\'a0\'a0 upper_CL\'a0\'a0 = upr,\
\'a0\'a0\'a0 p_adj\'a0\'a0\'a0\'a0\'a0 = `p adj`\
\'a0 ) %>%\
\'a0 separate(comparison, into = c("g1","g2"), sep = "-") %>%\
\'a0 mutate(\
\'a0\'a0\'a0 comp_label\'a0\'a0 = str_wrap(paste(g1, "\'96", g2), width = 25),\
\'a0\'a0\'a0 signif\'a0\'a0\'a0\'a0\'a0\'a0 = case_when(\
\'a0\'a0\'a0\'a0\'a0 p_adj < 0.001 ~ "***",\
\'a0\'a0\'a0\'a0\'a0 p_adj < 0.01\'a0 ~ "**",\
\'a0\'a0\'a0\'a0\'a0 p_adj < 0.05\'a0 ~ "*",\
\'a0\'a0\'a0\'a0\'a0 TRUE\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 ~ ""\
\'a0\'a0\'a0 )\
\'a0 ) %>%\
\'a0 arrange(Difference) %>%\
\'a0 mutate(comp_label = factor(comp_label, levels = comp_label))\
\'a0\
pB <- ggplot(tuk, aes(x = Difference, y = comp_label)) +\
\'a0 geom_vline(xintercept = 0, linetype = "dashed", color = "gray60") +\
\'a0 geom_errorbarh(aes(xmin = lower_CL, xmax = upper_CL), height = 0.25) +\
\'a0 geom_point(size = 3, color = "#4C78A8") +\
\'a0 geom_text(aes(label = signif),\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 nudge_x = ifelse(tuk$Difference > 0, 0.02, -0.02),\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 size = 5) +\
\'a0 labs(\
\'a0\'a0\'a0 title = "B. Tukey HSD Post-Hoc Differences",\
\'a0\'a0\'a0 x\'a0\'a0\'a0\'a0 = "Difference in Mean Selection Rate",\
\'a0\'a0\'a0 y\'a0\'a0\'a0\'a0 = NULL\
\'a0 ) +\
\'a0 theme_minimal(base_size = 14) +\
\'a0 theme(\
\'a0\'a0\'a0 plot.title\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 = element_text(face = "bold", size = 16),\
\'a0\'a0\'a0 axis.text.y\'a0\'a0\'a0\'a0\'a0\'a0\'a0 = element_text(size = 10),\
\'a0\'a0\'a0 axis.text.x\'a0\'a0\'a0\'a0\'a0\'a0\'a0 = element_text(size = 12),\
\'a0\'a0\'a0 axis.title.x\'a0\'a0\'a0\'a0\'a0\'a0 = element_text(face = "bold", size = 14),\
\'a0\'a0\'a0 plot.margin\'a0\'a0\'a0\'a0\'a0\'a0\'a0 = margin(10, 10, 10, 10)\
\'a0 )\
\'a0\
# 4) Combine panels ----------------------------------------------------------\
(fig3_post <- pA | pB + plot_layout(widths = c(1,1)))\
Percent of Rounds Selecting a Labeled Article\\n(by Condition)\
library(dplyr)\
library(purrr)\
library(tidyr)\
library(jsonlite)\
library(ggplot2)\
\'a0\
# 1) A safe JSON parser for the `article` field\
safe_parse_article <- function(txt) \{\
\'a0 if (is.na(txt) || !nzchar(txt)) \{\
\'a0\'a0\'a0 return(list(\
\'a0\'a0\'a0\'a0\'a0 selected_article_id\'a0\'a0\'a0\'a0\'a0\'a0\'a0 = NA_integer_,\
\'a0\'a0\'a0\'a0\'a0 selected_article_title\'a0\'a0\'a0\'a0 = NA_character_,\
\'a0\'a0\'a0\'a0\'a0 selected_article_had_label = NA,\
\'a0\'a0\'a0\'a0\'a0 label_explained\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 = NA\
\'a0\'a0\'a0 ))\
\'a0 \}\
\'a0 tryCatch(\
\'a0\'a0\'a0 fromJSON(txt, simplifyVector = TRUE),\
\'a0\'a0\'a0 error = function(e) list(\
\'a0\'a0\'a0\'a0\'a0 selected_article_id\'a0\'a0\'a0\'a0\'a0\'a0\'a0 = NA_integer_,\
\'a0\'a0\'a0\'a0\'a0 selected_article_title\'a0\'a0\'a0\'a0 = NA_character_,\
\'a0\'a0\'a0\'a0\'a0 selected_article_had_label = NA,\
\'a0\'a0\'a0\'a0\'a0 label_explained\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 = NA\
\'a0\'a0\'a0 )\
\'a0 )\
\}\
\'a0\
# 2) Parse out the JSON into real columns, keeping `id` & `participant_id`\
rounds2 <- rounds_clean %>%\
\'a0 select(id, participant_id, article) %>%\'a0\'a0\'a0\'a0\'a0 # pick only the needed cols\
\'a0 mutate(parsed = map(article, safe_parse_article)) %>%\
\'a0 unnest_wider(parsed) %>%\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 # yields selected_article_id, selected_article_had_label, etc.\
\'a0 select(id, participant_id, selected_article_had_label)\
\'a0\
# 3) Join back to mid_df on mid_df$round_id == rounds2$id\
mid_labeled <- mid_df %>%\
\'a0 filter(condition != "nolabel") %>%\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 # drop nolabel condition\
\'a0 left_join(rounds2, by = c("round_id" = "id", "participant_id"))\
\'a0\
# 4) Summarise: percent of rounds in which a labeled article was selected\
summary_df <- mid_labeled %>%\
\'a0 group_by(condition) %>%\
\'a0 summarise(\
\'a0\'a0\'a0 total_rounds\'a0\'a0 = n(),\
\'a0\'a0\'a0 labeled_rounds = sum(selected_article_had_label, na.rm = TRUE),\
\'a0\'a0\'a0 pct_labeled\'a0\'a0\'a0 = labeled_rounds / total_rounds * 100,\
\'a0\'a0\'a0 .groups = "drop"\
\'a0 )\
\'a0\
print(summary_df)\
# A tibble: 3 \'d7 4\
#\'a0\'a0 condition total_rounds labeled_rounds pct_labeled\
#\'a0\'a0 <chr>\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 <int>\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 <int>\'a0\'a0\'a0\'a0\'a0\'a0 <dbl>\
# 1 color\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 210\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 120\'a0\'a0\'a0\'a0\'a0\'a0\'a0 57.1\
# 2 c2pa\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 215\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 140\'a0\'a0\'a0\'a0\'a0\'a0\'a0 65.1\
# 3 no_color\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 205\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 100\'a0\'a0\'a0\'a0\'a0\'a0\'a0 48.8\
\'a0\
# 5) Plot those percentages\
ggplot(summary_df, aes(x = condition, y = pct_labeled, fill = condition)) +\
\'a0 geom_col(show.legend = FALSE, width = 0.6) +\
\'a0 geom_text(aes(label = sprintf("%.1f%%", pct_labeled)),\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 vjust = -0.5, size = 5) +\
\'a0 scale_y_continuous(expand = expansion(mult = c(0, .1))) +\
\'a0 labs(\
\'a0\'a0\'a0 title = "Percent of Rounds Selecting a Labeled Article\\n(by Condition)",\
\'a0\'a0\'a0 x\'a0\'a0\'a0\'a0 = "Condition",\
\'a0\'a0\'a0 y\'a0\'a0\'a0\'a0 = "Percent of Selections"\
\'a0 ) +\
\'a0 theme_minimal(base_size = 14) +\
\'a0 theme(plot.title = element_text(face = "bold", hjust = 0.5))\
}